<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.17">

    
  <!-- Spot Style - Default Point Spot Style 1 -->
  <style name="IconDefaultPointSpotStyle1"
         url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint0.png"
         visible="false"


         onhover="onhoverIconDefaultPointSpotStyle1"
         onout="onoutIconDefaultPointSpotStyle1"
         />
  <action name="onhoverIconDefaultPointSpotStyle1">
    showtooltip(hotspot);
  </action>
  <action name="onoutIconDefaultPointSpotStyle1">
    hideTooltip();



  </action>

          <!-- unsupported kind of display : PointMap -->

  <!-- ***************** -->
  <!-- Urban Control Bar -->
  <!-- ***************** -->


  <krpano theme12barbuilt="false" theme12backgroundwidthwhenclosed="0" theme12backgroundwidthwhenopened="0" theme12IsOpened="false" />
  <events name="theme12barevents" onxmlcomplete="theme12buildMenuBar();" keep="true"/>
  <action name="theme12buildMenuBar">
    ifnot (theme12barbuilt, theme12buildMenu(); set(theme12barbuilt, true););
  </action>

  <style name="theme12_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         height="40" width="40"
         crop="0|0|50|50"
         onovercrop="0|50|50|50"
         ondowncrop="0|100|50|50"
         onhover="showTooltip(bottom, theme12menuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />

    <layer name="theme12_menu_bg"
            keep="true"
            type="container"
            zorder="0"
            width="40"
            height="40"
            align="bottom"
            x="0" y="10"
            maskchildren="true"
            rotate="0"
            visible="false"
            >


    <layer name="theme12btn_ctrlmode_move_to"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_to.png"
            style="theme12_btn_style"
            tooltip="controlBar_urbanctrlmodeMoveTip"
            onclick="setControlModeMoveTo();"
            visible="false"
            devices="desktop"
            />
    <layer name="theme12btn_ctrlmode_drag_to"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_drag_to.png"
            style="theme12_btn_style"
            tooltip="controlBar_urbanctrlmodeDragTip"
            onclick="setControlModeDragTo();"
            visible="false"
            devices="desktop"
            />

    <layer name="theme12btn_in"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_zoom_in.png"
            ondown="set(fov_moveforce, -1);"
            onup="set(fov_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanzoomInTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_out"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_zoom_out.png"
            ondown="set(fov_moveforce, +1);"
            onup="set(fov_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanzoomOutTip"
            devices="desktop"
            visible="false"
            />

    <layer name="theme12btn_left"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_left.png"
            ondown="set(hlookat_moveforce, -1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveLeftTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_right"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_right.png"
            ondown="set(hlookat_moveforce, +1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveRightTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_up"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_up.png"
            ondown="set(vlookat_moveforce, -1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveUpTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_down"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_down.png"
            ondown="set(vlookat_moveforce, +1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveDownTip"
            devices="desktop"
            visible="false"
            x="0"
            y="0"
            />





    <layer name="theme12btn_openfs"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();"
            style="theme12_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_urbanopenFsTip"
            />
    <layer name="theme12btn_closefs"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();"
            style="theme12_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_urbancloseFsTip"
            />





    <layer name="theme12btn_hidecontrols"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_hide_controls.png"
           style="theme12_btn_style"
           onclick="theme12hideMenuControls();hideTourControls();"
           visible="false"
           tooltip="controlBar_urbanhideControlsTip"
           />
    <layer name="theme12btn_showcontrols"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_show_controls.png"
           style="theme12_btn_style"
           onclick="theme12showMenuControls();showTourControls();"
           tooltip="controlBar_urbandisplayControlsTip"
           visible="false"
           />
 </layer>




  <events name="theme12controlmodechangedevent" oncontrolmodechanged="theme12updateControlModeButtons();" keep="true"/>
	<action name="theme12HideControlModeButtons">
		set(layer[theme12btn_ctrlmode_move_to].visible, false);
		set(layer[theme12btn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="theme12ShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[theme12btn_ctrlmode_drag_to].visible, true);
			set(layer[theme12btn_ctrlmode_move_to].visible, false);
		,
			set(layer[theme12btn_ctrlmode_move_to].visible, true);
			set(layer[theme12btn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="theme12updateControlModeButtons">
	if (device.desktop,
		set(theme12DisplayControlModeButtons, false);
		if (theme12IsOpened, set(theme12DisplayControlModeButtons, true););
		if (theme12DisplayControlModeButtons,
			theme12ShowControlModeButtons();
		,
			theme12HideControlModeButtons();
		);
	,
		theme12HideControlModeButtons();
	);
	</action>


  <action name="theme12hideMenuControls">
    set(theme12IsOpened, false);
    set(layer[theme12btn_hidecontrols].visible, false);
    set(layer[theme12btn_showcontrols].visible, true);


if (device.desktop,
	set(layer[theme12btn_in].visible, false);
	set(layer[theme12btn_out].visible, false);
);
if (device.desktop,
	set(layer[theme12btn_up].visible, false);
	set(layer[theme12btn_down].visible, false);
);
if (device.desktop,
	set(layer[theme12btn_left].visible, false);
	set(layer[theme12btn_right].visible, false);
);
	theme12updateFullscreenButtons();




	theme12updateControlModeButtons();


    set(layer[theme12_menu_bg].width , get(theme12backgroundwidthwhenclosed));
  set(layer[theme12_menu_bg].visible, true);
  </action>
  <action name="theme12showMenuControls">
    set(theme12IsOpened, true);
    set(layer[theme12btn_hidecontrols].visible, true);
    set(layer[theme12btn_showcontrols].visible, false);
	set(layer[theme12_menu_bg].visible, true);


if (device.desktop,
	set(layer[theme12btn_in].visible, true);
	set(layer[theme12btn_out].visible, true);
);
if (device.desktop,
	set(layer[theme12btn_up].visible, true);
	set(layer[theme12btn_down].visible, true);
);
if (device.desktop,
	set(layer[theme12btn_left].visible, true);
	set(layer[theme12btn_right].visible, true);
);
	theme12updateFullscreenButtons();




	theme12updateControlModeButtons();



    set(layer[theme12_menu_bg].width, get(theme12backgroundwidthwhenopened));
  </action>



  <events name="theme12menufullscreenchangeevent"
          onenterfullscreen="theme12updateFullscreenButtons();"
          onexitfullscreen="theme12updateFullscreenButtons();"
          keep="true"/>
	<action name="theme12HideFullscreenButtons">
		set(layer[theme12btn_openfs].visible , false);
		set(layer[theme12btn_closefs].visible, false);
	</action>
	<action name="theme12ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[theme12btn_openfs].visible , false);
				set(layer[theme12btn_closefs].visible, true);
			,
				set(layer[theme12btn_openfs].visible ,true);
				set(layer[theme12btn_closefs].visible,false);
			);
		,
			theme12HideFullscreenButtons();
		);
	</action>
	<action name="theme12updateFullscreenButtons">
		set(theme12DisplayFullscreenButtons, false);
		if (theme12IsOpened, set(theme12DisplayFullscreenButtons, true););
		if (theme12DisplayFullscreenButtons,
			theme12ShowFullscreenButtons();
		,
			theme12HideFullscreenButtons();
		);
	</action>



  <textstyle name="theme12menuTooltipStyle"
             font="Helvetica"
             fontsize="16"
             bold="true"
             italic="false"
             background="false"
             border="false"
             alpha="1"
             textcolor="0xdec718"
             effect="dropshadow(2,45,0x000000,4,1);"
             origin="cursor"
             edge="bottom"
             yoffset="-20"
             xoffset="0"
             noclip="true"/>

<layer name="theme12menuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0x000000"
	backgroundalpha="0.3"
	border="false"
	bordercolor="0xffffff"
	css="color:#dec718;font-family:Helvetica;font-weight:bold;font-size:16px;text-align:center;"
	width="200"
	height="20"
	autoheight="true"
		edge="bottom"
	selectable="false"
	textshadow="1.0"
	zorder="0"
	visible="false"
	html=""
	devices="html5"
/>



  <action name="theme12buildMenu">
    
    set(theme12button_pos, 0);

	set(theme12backgroundwidthwhenclosed, 40);
    set(layer[theme12btn_hidecontrols].x, get(theme12button_pos));
    set(layer[theme12btn_showcontrols].x, get(theme12button_pos));
    inc(theme12button_pos, 45);



      if (device.fullscreensupport,
        set(layer[theme12btn_openfs].x , get(theme12button_pos));
        set(layer[theme12btn_closefs].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );





    if (device.desktop,
      set(layer[theme12btn_ctrlmode_drag_to].x, get(theme12button_pos));
      set(layer[theme12btn_ctrlmode_move_to].x, get(theme12button_pos));
      inc(theme12button_pos, 45);
    );



      if (device.desktop,
        set(layer[theme12btn_right].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
        set(layer[theme12btn_left].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );

      if (device.desktop,
        set(layer[theme12btn_down].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
        set(layer[theme12btn_up].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );
      if (device.desktop,
        set(layer[theme12btn_out].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
        set(layer[theme12btn_in].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );

      dec(theme12button_pos, 5);

      set(theme12backgroundwidthwhenopened, get(theme12button_pos));
      set(layer[theme12_menu_bg].width, get(theme12backgroundwidthwhenopened));
	
	

    </action>

	<events name="theme12StartTourEvents" onTourStart="theme12CallOnStartTour();" keep="true" />
	
	<action name="theme12CallOnStartTour">
		
		theme12showMenuControls();
	</action>

  <!-- ************ -->
  <!-- Logo : viewport / bottomright -->
  <!-- ************ -->


  <layer align="bottomright"
         x="20"
         y="20"
         zorder="1"
         name="logo"
         keep="true"
         visible="false"
         capture="false"
		
			tooltip="logotooltipText"
			onhover="showTooltip(bottomright);"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/png.png" 
         onclick="openurl(http://artpicnic.org/,_blank);"

         height="270"
         width="250"

         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>





  <!-- ******************* -->
  <!-- Loading Information -->
  <!-- ******************* -->

  <events name="loaderinformationevent" onxmlcomplete="loaderinformationupdate();" keep="true" devices="flash" />

  <action name="loaderinformationupdate" devices="flash">
    if (progress.progress == 1,
      delayedcall(0.5, set(layer[loaderinformationtextfield].visible, false); );
     ,
         set(layer[loaderinformationtextfield].visible, true);
    );
    mul(progresstext, get(progress.progress),100);
    roundval(progresstext);
    txtadd(progresstext, get(progresstext), %);
    set(layer[loaderinformationtextfield].html, get(progresstext));
    ifnot(progress.progress GE 1, delayedcall(0.01, loaderinformationupdate() ));
  </action>

  <layer name="loaderinformationtextfield"
         devices="flash"
         keep="true"
         zorder="2"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="center"
         x="0"
         y="0"
         borderwidth="0"
         background="false"
         autoheight="true"
         capture="false"
         handcursor="false"
         selectable="false"
         alpha="1"
         visible="true"
         css="
              text-align:center;
              color:#f0e212;
              font-family:Arial;
              font-weight:bold;
              font-size:16px;
             "
  />


	
	<!-- ********* -->
	<!-- FloorPlan -->
	<!-- ********* -->
	
	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="ffffff" type="string" />
			<option name="background_lighter_color" value="ffffff" type="string" />
			<option name="background_darker_color" value="d5d5d5" type="string" />
			<option name="background_alpha" value="0" type="float" />
			<option name="text_color" value="000000" type="string" />
			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="multiple" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="true" type="bool" />
			
			<option name="title" value="project_floor_title" type="string" />
			
			<option name="title_font" value="Verdana" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="000000" type="string" />
			<option name="display_orientation" value="false" type="bool" />
			<option name="display_radar" value="true" type="bool" />
			<option name="radar_radius" value="50" type="int" />
			<option name="radar_line_width" value="1" type="int" />
			<option name="radar_line_color" value="1216ff" type="string" />
			<option name="radar_line_alpha" value="0.525490196078431" type="float" />
			<option name="radar_fill_color" value="ffffff" type="string" />
			<option name="radar_fill_alpha" value="0.300007629510948" type="float" />
			<option name="close_on_click" value="false" type="bool" />
			<option name="zorder" value="3" type="int" />
		</settings>
		
		<floorplanItems selectedItem="fpitemmain" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
				
				<floorplanItem 
					name="fpitemmain" 
					width="573" 
					height="924" 
					groupName="" 
					url="floorplan/park.png" 
					title="project_floor_title"
					heading="0">
							<spot name="spotmap111" posX="0.344288" posY="0.86531" heading="-3.39999999999981" desc="spotmap111_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano44" jsClick="spotmap111ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap112" posX="0.452269" posY="0.689922" heading="-97.4000000000002" desc="spotmap112_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano50" jsClick="spotmap112ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap113" posX="0.43662" posY="0.535853" heading="80.7999999999998" desc="spotmap113_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano53" jsClick="spotmap113ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap114" posX="0.366197" posY="0.590116" heading="-18.5999999999995" desc="spotmap114_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano52" jsClick="spotmap114ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap115" posX="0.41471" posY="0.420543" heading="153.2" desc="spotmap115_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano54" jsClick="spotmap115ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap116" posX="0.344288" posY="0.366279" heading="122.2" desc="spotmap116_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano55" jsClick="spotmap116ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap117" posX="0.528951" posY="0.60562" heading="85.6000000000004" desc="spotmap117_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano51" jsClick="spotmap117ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap118" posX="0.577465" posY="0.563953" heading="0" desc="spotmap118_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano57" jsClick="spotmap118ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap119" posX="0.513302" posY="0.476744" heading="-82.6" desc="spotmap119_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano56" jsClick="spotmap119ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap120" posX="0.58529" posY="0.398256" heading="0" desc="spotmap120_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano45" jsClick="spotmap120ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap121" posX="0.754304" posY="0.522287" heading="0" desc="spotmap121_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano46" jsClick="spotmap121ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap122" posX="0.785603" posY="0.411822" heading="0" desc="spotmap122_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano47" jsClick="spotmap122ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap123" posX="0.812207" posY="0.277132" heading="0" desc="spotmap123_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano48" jsClick="spotmap123ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap124" posX="0.86698" posY="0.142442" heading="0" desc="spotmap124_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano49" jsClick="spotmap124ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
				</floorplanItem>
			
			
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady-floorPlan">
		set(ptplugin[floorPlan].jsready, true);
	</action>
	
	
		<!-- floorplan main spots counter : 14 -->
			<action name="spotmap111ActionSpotFloorPlan">
          if (xml.scene != pano44,
            mainloadscene(pano44);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap112ActionSpotFloorPlan">
          if (xml.scene != pano50,
            mainloadscene(pano50);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap113ActionSpotFloorPlan">
          if (xml.scene != pano53,
            mainloadscene(pano53);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap114ActionSpotFloorPlan">
          if (xml.scene != pano52,
            mainloadscene(pano52);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap115ActionSpotFloorPlan">
          if (xml.scene != pano54,
            mainloadscene(pano54);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap116ActionSpotFloorPlan">
          if (xml.scene != pano55,
            mainloadscene(pano55);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap117ActionSpotFloorPlan">
          if (xml.scene != pano51,
            mainloadscene(pano51);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap118ActionSpotFloorPlan">
          if (xml.scene != pano57,
            mainloadscene(pano57);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap119ActionSpotFloorPlan">
          if (xml.scene != pano56,
            mainloadscene(pano56);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap120ActionSpotFloorPlan">
          if (xml.scene != pano45,
            mainloadscene(pano45);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap121ActionSpotFloorPlan">
          if (xml.scene != pano46,
            mainloadscene(pano46);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap122ActionSpotFloorPlan">
          if (xml.scene != pano47,
            mainloadscene(pano47);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap123ActionSpotFloorPlan">
          if (xml.scene != pano48,
            mainloadscene(pano48);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap124ActionSpotFloorPlan">
          if (xml.scene != pano49,
            mainloadscene(pano49);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
	
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,true););floorPlanActivateDefaultSpot();" 
	onviewchanged="floorPlanOnViewChange();" 
	onhidetourfloorplan="floorPlanCloseTourFloorPlan();" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart="floorPlanOpenTourFloorPlan();"
	keep="true" />
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea-floorPlanArea(false);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		showKolorArea-floorPlanArea(false);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		ifnot(ptplugin[floorPlanArea].isOpen,
			openKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="floorPlanOnViewChange">
		if (floorPlanFloorPlanLoaded == true,
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedSpot == "",
				js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.fov)));
			);
		);
	</action>
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems[0].selectedItem, %2);
		
		ifnot(%1 == "",
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotFov, get(view.fov));
		);
		
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));
	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearch, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		set(defaultfloorplaniteminc-wait,50);
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem.count , inc(defaultfloorplaniteminc),
			if(defaultfloorplaniteminc-wait == defaultfloorplaniteminc,
				add(defaultfloorplaniteminc-wait,50);
				wait(0);
			);
			if(floorPlanSpotSearch == true,
				
				if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
				,
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[fpitemmain].name));
						set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[fpitemmain].name));
					);
				);
			);
			if(floorPlanSpotSearch == true,
				set(defaultspotinc-wait,50);
				for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
					if(defaultspotinc-wait == defaultspotinc,
						add(defaultspotinc-wait,50);
						wait(0);
					);
					if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearch, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems[0].selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems[0].selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="20" type="int" />
		<option name="margin_y" value="20" type="int" />
		<option name="display_title" value="true" type="bool" />
		<option name="title" value="project_floor_title" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="background_color" value="ffffff" type="string" />
		<option name="background_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.500007629510948" type="float" />
		<option name="padding" value="15" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_width" value="250" type="int" />
		<option name="area_height" value="400" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea-floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback-floorPlanArea')" type="string" />
		<option name="zorder" value="3" type="int" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady-floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);
	</action>
	
	<action name="openKolorArea-floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			set(ptplugin[floorPlanArea].isOpen, true);
			set(ptplugin[floorPlanArea].visible, true);
			set(ptplugin[floorPlanArea].doNotDeleteMe, false);
			pauseautorotation();
			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea-floorplanDIV"&gt;&lt;/div&gt;));
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea-floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			resumeautorotation();
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
			set(ptplugin[floorPlanArea].isOpen, false);
		);
	</action>
	
	<action name="toggleKolorArea-floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea-floorPlanArea();
		,
			openKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback-floorPlanArea">
		resumeautorotation();
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();
	</action>
	
	<action name="changeTitleKolorArea-floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea-floorPlanArea">
		set(ptplugin[floorPlanArea].visible, true);
		set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		pauseautorotation();
		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	</action>
		
	<action name="hideKolorArea-floorPlanArea">
		resumeautorotation();
		set(ptplugin[floorPlanArea].visible, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
	</action>
	
	<events name="kolorAreaEvents-floorPlanArea" 
		keep="true"
	/>
	
	
<!-- **************** -->
<!-- Projections Menu -->
<!-- **************** -->
<ptplugin name="projectionMenu" engine="kolorMenu">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="orientation" value="vertical" type="string" />
		<option name="sub_orientation" value="horizontal" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="background_color" value="dbd40a" type="string" />
		<option name="background_alpha" value="1" type="float" />
		<option name="item_spacer" value="0" type="int" />
		<option name="border_radius" value="0" type="int" />
		<option name="full_size" value="false" type="bool" />

		<option name="item_out_border_radius" value="0" type="int" />
		<option name="item_out_bg_color"      value="dbd40a" type="string" />
		<option name="item_out_bg_alpha"      value="1" type="float" />
		<option name="item_out_font_color"    value="ffffff" type="string" />
		<option name="item_out_font_family"   value="Arial" type="string" />
		<option name="item_out_font_size"     value="14" type="int" />
		<option name="item_out_font_weight"   value="normal" type="string" />
		<option name="item_out_font_style"    value="normal" type="string" />
		<option name="item_out_font_decoration"    value="normal" type="string" />
		
		<option name="item_hover_border_radius" value="0" type="int" />
		<option name="item_hover_bg_color" value="fff813" type="string" />
		<option name="item_hover_bg_alpha"      value="1" type="float" />
		<option name="item_hover_font_color"    value="ffffff" type="string" />
		<option name="item_hover_font_family"   value="Arial" type="string" />
		<option name="item_hover_font_size"     value="14" type="int" />
		<option name="item_hover_font_weight"   value="normal" type="string" />
		<option name="item_hover_font_style"    value="normal" type="string" />
		<option name="item_hover_font_decoration"    value="normal" type="string" />
		
		<option name="item_selected_color" value="dbd40a" type="string" />
		<option name="item_selected_alpha" value="1" type="string" />
		
		<option name="zorder"                   value="4" type="int" />
	</settings>
	<internaldata>
		<group name="projectionMenuButton" titleID="projectionMenumenutitlelabel" thumbnail="" subMenu="true">
			<item name="projViewNormal"        titleID="projectionMenunormallabel" action="invokeKrFunction('setViewNormal();')"        thumbnail=""/>
			<item name="projViewFisheye"       titleID="projectionMenufisheyelabel" action="invokeKrFunction('setViewFisheye();')"       thumbnail=""/>
			<item name="projViewArchitectural" titleID="projectionMenuarchitecturallabel" action="invokeKrFunction('setViewArchitectural();')" thumbnail=""/>
			<item name="projViewStereographic" titleID="projectionMenustereographiclabel" action="invokeKrFunction('setViewStereographic();')" thumbnail=""/>
			<item name="projViewPannini"       titleID="projectionMenupanninilabel" action="invokeKrFunction('setViewPannini();')"       thumbnail=""/>
			<item name="projViewLittlePlanet"  titleID="projectionMenulittleplanetlabel" action="invokeKrFunction('setViewLittlePlanet();')"  thumbnail=""/>

		</group>
	</internaldata>
</ptplugin>

<action name="showKolorMenu-projectionMenu">
	
	js(openKolorMenu(projectionMenu));
</action>

<action name="hideKolorMenu-projectionMenu">
	js(invokePluginFunction(projectionMenu, hideKolorMenu));
</action>

<events name="kolorMenuEvents-projectionMenu" 
		keep="true"
		
		
		onTourStart="js(openKolorMenu(projectionMenu));"
/><action name="setViewPannini">
	stopSetViewTweens();
	setViewPanniniComplete();
</action>

<action name="setViewPanniniComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == false, set(backtonormalfirst,true); );
		if(view.stereographic == false, set(backtonormalfirst,true); );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		set(view.pannini, true);
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75));
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action><action name="setViewFisheye">
	stopSetViewTweens();
	setViewFisheyeComplete();
</action>

<action name="setViewFisheyeComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.30), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.30), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.fovmax, 179, 0.25);
			set(view.fisheyefovlink, 1.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
			tween(view.fisheye, 0.40, distance(1.0, 1.25));
			tween(view.vlookat, get(panoview.v), 1.25);
		);
	);
</action><action name="setViewStereographic">
	stopSetViewTweens();
	setViewStereographicComplete();
</action>

<action name="setViewStereographicComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action>
  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action><action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action><action name="setViewLittlePlanet">
	stopSetViewTweens();
	setViewLittlePlanetComplete();
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0, updateobject(true,true)); );
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action><action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
</action>
</krpano>