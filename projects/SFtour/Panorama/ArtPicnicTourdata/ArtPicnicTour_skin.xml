<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.17">

    
  <!-- Spot Style - Default Point Spot Style 1 -->
  <style name="IconDefaultPointSpotStyle1"
         url="%FIRSTXML%/spots/hotspot_animated_user_defaultpoint0.png"
         visible="false"

         frame="0"
         lastframe="19"
         framewidth="64"
         frameheight="64"
         stopspotsequence="false"
         onloaded="setdefaultanimatedspotframe();startspotanimation(0.1);"

         onhover="onhoverIconDefaultPointSpotStyle1"
         onout="onoutIconDefaultPointSpotStyle1"
         />
  <action name="onhoverIconDefaultPointSpotStyle1">
    showtooltip(hotspot);
  </action>
  <action name="onoutIconDefaultPointSpotStyle1">
    hideTooltip();



  </action>

          <!-- unsupported kind of display : PointMap -->

  <!-- ***************** -->
  <!-- Urban Control Bar -->
  <!-- ***************** -->


  <krpano theme12barbuilt="false" theme12backgroundwidthwhenclosed="0" theme12backgroundwidthwhenopened="0" theme12IsOpened="false" />
  <events name="theme12barevents" onxmlcomplete="theme12buildMenuBar();" keep="true"/>
  <action name="theme12buildMenuBar">
    ifnot (theme12barbuilt, theme12buildMenu(); set(theme12barbuilt, true););
  </action>

  <style name="theme12_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         height="40" width="40"
         crop="0|0|50|50"
         onovercrop="0|50|50|50"
         ondowncrop="0|100|50|50"
         onhover="showTooltip(bottom, theme12menuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />

    <layer name="theme12_menu_bg"
            keep="true"
            type="container"
            zorder="0"
            width="40"
            height="40"
            align="bottom"
            x="10" y="10"
            maskchildren="true"
            rotate="0"
            visible="false"
            >


    <layer name="theme12btn_in"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_zoom_in.png"
            ondown="set(fov_moveforce, -1);"
            onup="set(fov_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanzoomInTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_out"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_zoom_out.png"
            ondown="set(fov_moveforce, +1);"
            onup="set(fov_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanzoomOutTip"
            devices="desktop"
            visible="false"
            />

    <layer name="theme12btn_left"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_left.png"
            ondown="set(hlookat_moveforce, -1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveLeftTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_right"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_right.png"
            ondown="set(hlookat_moveforce, +1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveRightTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_up"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_up.png"
            ondown="set(vlookat_moveforce, -1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveUpTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme12btn_down"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_move_down.png"
            ondown="set(vlookat_moveforce, +1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme12_btn_style"
            tooltip="controlBar_urbanmoveDownTip"
            devices="desktop"
            visible="false"
            x="0"
            y="0"
            />





    <layer name="theme12btn_openfs"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();"
            style="theme12_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_urbanopenFsTip"
            />
    <layer name="theme12btn_closefs"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();"
            style="theme12_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_urbancloseFsTip"
            />



    <layer name="theme12btn_display_help"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_help.png"
            onclick="theme12displayHelp();"
            style="theme12_btn_style"
            devices="desktop"
            visible="false"
            tooltip="controlBar_urbandisplayHelpTip"
            />
    <layer name="theme12btn_close_help"
            url="%FIRSTXML%/graphics/urbancontrolbar/btn_help.png"
            onclick="theme12closeHelp();"
            style="theme12_btn_style"
            visible="false"
            devices="desktop"
            tooltip="controlBar_urbanhideHelpTip"
            />



    <layer name="theme12btn_hidecontrols"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_hide_controls.png"
           style="theme12_btn_style"
           onclick="theme12hideMenuControls();hideTourControls();"
           visible="false"
           tooltip="controlBar_urbanhideControlsTip"
           />
    <layer name="theme12btn_showcontrols"
           url="%FIRSTXML%/graphics/urbancontrolbar/btn_show_controls.png"
           style="theme12_btn_style"
           onclick="theme12showMenuControls();showTourControls();"
           tooltip="controlBar_urbandisplayControlsTip"
           visible="false"
           />
 </layer>





  <action name="theme12hideMenuControls">
    set(theme12IsOpened, false);
    set(layer[theme12btn_hidecontrols].visible, false);
    set(layer[theme12btn_showcontrols].visible, true);


if (device.desktop,
	set(layer[theme12btn_in].visible, false);
	set(layer[theme12btn_out].visible, false);
);
if (device.desktop,
	set(layer[theme12btn_up].visible, false);
	set(layer[theme12btn_down].visible, false);
);
if (device.desktop,
	set(layer[theme12btn_left].visible, false);
	set(layer[theme12btn_right].visible, false);
);
	theme12updateFullscreenButtons();
	theme12updateHelpButtons();






    set(layer[theme12_menu_bg].width , get(theme12backgroundwidthwhenclosed));
  set(layer[theme12_menu_bg].visible, true);
  </action>
  <action name="theme12showMenuControls">
    set(theme12IsOpened, true);
    set(layer[theme12btn_hidecontrols].visible, true);
    set(layer[theme12btn_showcontrols].visible, false);
	set(layer[theme12_menu_bg].visible, true);


if (device.desktop,
	set(layer[theme12btn_in].visible, true);
	set(layer[theme12btn_out].visible, true);
);
if (device.desktop,
	set(layer[theme12btn_up].visible, true);
	set(layer[theme12btn_down].visible, true);
);
if (device.desktop,
	set(layer[theme12btn_left].visible, true);
	set(layer[theme12btn_right].visible, true);
);
	theme12updateFullscreenButtons();
	theme12updateHelpButtons();







    set(layer[theme12_menu_bg].width, get(theme12backgroundwidthwhenopened));
  </action>

		<layer name="theme12helpScreenBg" align="center" keep="true" onclick="theme12closeHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_bg.png" visible="false" rotate="-25" height="50%" width="prop" zorder="97" displayed="false">
			<layer name="theme12helpScreenShadow" align="center" keep="true" onclick="theme12closeHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_shadow.png"   rotate="12"  height="100%" width="prop" x="0" zorder="0" blendmode="multiply"/>
			<layer name="theme12helpScreenMouse" align="center" keep="true" onclick="theme12closeHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_mouse.png" rotate="25"  height="100%" width="prop" x="0" zorder="1">
				<layer name="theme12helpScreenKeyboard" align="center" keep="true" onclick="theme12closeHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_keyboard.png" rotate="-25" height="100%" width="prop" x="0">
					<layer name="theme12helpScreenFg" align="center" keep="true" onclick="theme12closeHelp();" url="%FIRSTXML%/graphics/urbancontrolbar/help_screen_outline.png" rotate="45" height="100%" width="prop" x="0" onover="tween(rotate, 0, 0.2)" onout="tween(rotate, 2, 0.2)"/>
				</layer>
			</layer>
		</layer>

	<action name="theme12displayHelp">
	if (device.desktop,
		set(layer[theme12helpScreenBg].displayed, true);
		set(layer[theme12helpScreenBg].visible, true);
		set(layer[theme12helpScreenShadow].visible, true);
		set(layer[theme12helpScreenMouse].visible, true);
		set(layer[theme12helpScreenKeyboard].visible, true);
		set(layer[theme12helpScreenFg].visible , true);
		tween(layer[theme12helpScreenBg].rotate, 0, 1);
		tween(layer[theme12helpScreenShadow].rotate, 0, 1);
		tween(layer[theme12helpScreenMouse].rotate, 0, 1);
		tween(layer[theme12helpScreenKeyboard].rotate, 0, 1);
		tween(layer[theme12helpScreenFg].rotate, 2, 1);
		theme12updateHelpButtons();
	);
	</action>
	<action name="theme12closeHelp">
	if (device.desktop,
		set(layer[theme12helpScreenBg].displayed, false);
		tween(layer[theme12helpScreenKeyboard].rotate, -25, 1, easeOutQuad, set(layer[theme12helpScreenKeyboard].visible,false););
		tween(layer[theme12helpScreenMouse].rotate, 25, 1, easeOutQuad, set(layer[theme12helpScreenMouse].visible,false););
		tween(layer[theme12helpScreenShadow].rotate, 12, 1, easeOutQuad, set(layer[theme12helpScreenShadow].visible,false););
		tween(layer[theme12helpScreenFg].rotate, 45, 1, easeOutQuad, set(layer[theme12helpScreenFg].visible,false););
		tween(layer[theme12helpScreenBg].rotate, -25, 1, easeOutQuad, set(layer[theme12helpScreenBg].visible,false););
		theme12updateHelpButtons();
	);
	</action>
	<action name="theme12HideHelpButtons">
		set(layer[theme12btn_display_help].visible, false);
		set(layer[theme12btn_close_help].visible, false);
	</action>
	<action name="theme12ShowHelpButtons">
		if (layer[theme12helpScreenBg].displayed,
			set(layer[theme12btn_close_help].visible, true);
			set(layer[theme12btn_display_help].visible, false);
		,
			set(layer[theme12btn_display_help].visible, true);
			set(layer[theme12btn_close_help].visible, false);
		);
	</action>
	<action name="theme12updateHelpButtons">
	if (device.desktop,
		set(theme12DisplayHelpButtons, false);
		if (theme12IsOpened, set(theme12DisplayHelpButtons, true););
		if (theme12DisplayHelpButtons,
			theme12ShowHelpButtons();
		,
			theme12HideHelpButtons();
		);
	,
		theme12HideHelpButtons();
	);
	</action>



  <events name="theme12menufullscreenchangeevent"
          onenterfullscreen="theme12updateFullscreenButtons();"
          onexitfullscreen="theme12updateFullscreenButtons();"
          keep="true"/>
	<action name="theme12HideFullscreenButtons">
		set(layer[theme12btn_openfs].visible , false);
		set(layer[theme12btn_closefs].visible, false);
	</action>
	<action name="theme12ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[theme12btn_openfs].visible , false);
				set(layer[theme12btn_closefs].visible, true);
			,
				set(layer[theme12btn_openfs].visible ,true);
				set(layer[theme12btn_closefs].visible,false);
			);
		,
			theme12HideFullscreenButtons();
		);
	</action>
	<action name="theme12updateFullscreenButtons">
		set(theme12DisplayFullscreenButtons, false);
		if (theme12IsOpened, set(theme12DisplayFullscreenButtons, true););
		if (theme12DisplayFullscreenButtons,
			theme12ShowFullscreenButtons();
		,
			theme12HideFullscreenButtons();
		);
	</action>



  <textstyle name="theme12menuTooltipStyle"
             font="Helvetica"
             fontsize="16"
             bold="true"
             italic="false"
             background="false"
             border="false"
             alpha="1"
             textcolor="0xe3e321"
             effect="dropshadow(2,45,0x000000,4,1);"
             origin="cursor"
             edge="bottom"
             yoffset="-20"
             xoffset="0"
             noclip="true"/>

<layer name="theme12menuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0x000000"
	backgroundalpha="0.3"
	border="false"
	bordercolor="0xffffff"
	css="color:#e3e321;font-family:Helvetica;font-weight:bold;font-size:16px;text-align:center;"
	width="200"
	height="20"
	autoheight="true"
		edge="bottom"
	selectable="false"
	textshadow="1.0"
	zorder="0"
	visible="false"
	html=""
	devices="html5"
/>



  <action name="theme12buildMenu">
    
    set(theme12button_pos, 0);

	set(theme12backgroundwidthwhenclosed, 40);
    set(layer[theme12btn_hidecontrols].x, get(theme12button_pos));
    set(layer[theme12btn_showcontrols].x, get(theme12button_pos));
    inc(theme12button_pos, 45);



      if (device.desktop,
        set(layer[theme12btn_display_help].x, get(theme12button_pos));
        set(layer[theme12btn_close_help].x  , get(theme12button_pos));
        inc(theme12button_pos, 45);
      );

      if (device.fullscreensupport,
        set(layer[theme12btn_openfs].x , get(theme12button_pos));
        set(layer[theme12btn_closefs].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );







      if (device.desktop,
        set(layer[theme12btn_right].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
        set(layer[theme12btn_left].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );

      if (device.desktop,
        set(layer[theme12btn_down].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
        set(layer[theme12btn_up].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );
      if (device.desktop,
        set(layer[theme12btn_out].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
        set(layer[theme12btn_in].x, get(theme12button_pos));
        inc(theme12button_pos, 45);
      );

      dec(theme12button_pos, 5);

      set(theme12backgroundwidthwhenopened, get(theme12button_pos));
      set(layer[theme12_menu_bg].width, get(theme12backgroundwidthwhenopened));
	
	

    </action>

	<events name="theme12StartTourEvents" onTourStart="theme12CallOnStartTour();" keep="true" />
	
	<action name="theme12CallOnStartTour">
		
		theme12showMenuControls();
	</action>

  <!-- ************ -->
  <!-- Logo : viewport / bottomright -->
  <!-- ************ -->


  <layer align="bottomright"
         x="5"
         y="6"
         zorder="1"
         name="logo"
         keep="true"
         visible="false"
         capture="false"
		
			tooltip="logotooltipText"
			onhover="showTooltip(bottomright);"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/png.png" 
         onclick="openurl(http://artpicnic.org/,_blank);"

         height="300"
         width="300"

         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>





  <!-- ************ -->
  <!-- Loading Text -->
  <!-- ************ -->

  <layer name="loadingtext"
         keep="true"
         zorder="2"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="center"
         x="0" y="0"
         html="Loading..."
         background="false"
         borderwidth="1"
         border="false"
         autoheight="true"
         handcursor="false"
         visible="false"
         enabled="false"
         textshadow="2"
         alpha="1"
         css="
              text-align:center;
              color:#ffffff;
              font-family:Arial;
              font-style:italic;
              font-weight:bold;
              font-size:22px;
             "
  />

  <action name="displayloadingtext">
    set(layer[loadingtext].visible, %1);
  </action>

  <events name="displayloadingtextWhenLoading" keep="true"
          onxmlcomplete="displayloadingtext(true);"
          onnewpano="displayloadingtext(true);"
          onremovepano="displayloadingtext(true);"
          onloadcomplete="displayloadingtext(false);"
          />



	
	<!-- ********* -->
	<!-- FloorPlan -->
	<!-- ********* -->
	
	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="ffffff" type="string" />
			<option name="background_lighter_color" value="ffffff" type="string" />
			<option name="background_darker_color" value="d5d5d5" type="string" />
			<option name="background_alpha" value="0" type="float" />
			<option name="text_color" value="000000" type="string" />
			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="multiple" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="false" type="bool" />
			<option name="title_font" value="Verdana" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="ffffff" type="string" />
			<option name="display_orientation" value="true" type="bool" />
			<option name="display_radar" value="true" type="bool" />
			<option name="radar_radius" value="50" type="int" />
			<option name="radar_line_width" value="1" type="int" />
			<option name="radar_line_color" value="368aff" type="string" />
			<option name="radar_line_alpha" value="0.700007629510948" type="float" />
			<option name="radar_fill_color" value="ffffff" type="string" />
			<option name="radar_fill_alpha" value="0.300007629510948" type="float" />
			<option name="close_on_click" value="false" type="bool" />
			<option name="zorder" value="3" type="int" />
		</settings>
		
		<floorplanItems selectedItem="fpitemmain" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
				
				<floorplanItem 
					name="fpitemmain" 
					width="573" 
					height="924" 
					groupName="" 
					url="floorplan/park.png" 
					title="project_floor_title"
					heading="0">
							<spot name="spotmap172" posX="0.344288" posY="0.877907" heading="-13.0000000000001" desc="spotmap172_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano142" jsClick="spotmap172ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap173" posX="0.455399" posY="0.69186" heading="-97.5999999999999" desc="spotmap173_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano148" jsClick="spotmap173ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap174" posX="0.533646" posY="0.60562" heading="43.8000000000001" desc="spotmap174_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano149" jsClick="spotmap174ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap175" posX="0.363067" posY="0.588178" heading="-15.3999999999995" desc="spotmap175_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano150" jsClick="spotmap175ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap176" posX="0.43662" posY="0.534884" heading="78.7999999999998" desc="spotmap176_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano151" jsClick="spotmap176ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap177" posX="0.339593" posY="0.366279" heading="78.7999999999998" desc="spotmap177_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano153" jsClick="spotmap177ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap178" posX="0.416275" posY="0.422481" heading="154.799999999999" desc="spotmap178_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano152" jsClick="spotmap178ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap179" posX="0.57903" posY="0.574612" heading="150.6" desc="spotmap179_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano155" jsClick="spotmap179ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap180" posX="0.555556" posY="0.471899" heading="-71.6000000000006" desc="spotmap180_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano154" jsClick="spotmap180ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap181" posX="0.552426" posY="0.40407" heading="0" desc="spotmap181_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano143" jsClick="spotmap181ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap182" posX="0.862285" posY="0.15407" heading="4.99999999999986" desc="spotmap182_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano147" jsClick="spotmap182ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap183" posX="0.802817" posY="0.278101" heading="2.00000000000026" desc="spotmap183_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano146" jsClick="spotmap183ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap184" posX="0.791862" posY="0.39438" heading="3.5999999999994" desc="spotmap184_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano145" jsClick="spotmap184ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
							<spot name="spotmap185" posX="0.763693" posY="0.488372" heading="14.9999999999998" desc="spotmap185_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano144" jsClick="spotmap185ActionSpotFloorPlan">
								<icon url="spots/hotspot_neutral_user_defaultmap0.png" iconWidth="32" iconHeight="32" iconAnchor="center" />
							</spot>
				</floorplanItem>
			
			
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady-floorPlan">
		set(ptplugin[floorPlan].jsready, true);
	</action>
	
	
		<!-- floorplan main spots counter : 14 -->
			<action name="spotmap172ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano142,
            mainloadscene(pano142);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap173ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano148,
            mainloadscene(pano148);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap174ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano149,
            mainloadscene(pano149);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap175ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano150,
            mainloadscene(pano150);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap176ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano151,
            mainloadscene(pano151);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap177ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano153,
            mainloadscene(pano153);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap178ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano152,
            mainloadscene(pano152);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap179ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano155,
            mainloadscene(pano155);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap180ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano154,
            mainloadscene(pano154);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap181ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano143,
            mainloadscene(pano143);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap182ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano147,
            mainloadscene(pano147);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap183ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano146,
            mainloadscene(pano146);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap184ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano145,
            mainloadscene(pano145);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap185ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano144,
            mainloadscene(pano144);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
	
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,true););floorPlanActivateDefaultSpot();" 
	onviewchanged="floorPlanOnViewChange();" 
	onhidetourfloorplan="floorPlanCloseTourFloorPlan();" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart="floorPlanOpenTourFloorPlan();"
	keep="true" />
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea-floorPlanArea(false);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		showKolorArea-floorPlanArea(false);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		ifnot(ptplugin[floorPlanArea].isOpen,
			openKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="floorPlanOnViewChange">
		if (floorPlanFloorPlanLoaded == true,
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedSpot == "",
				js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.fov)));
			);
		);
	</action>
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems[0].selectedItem, %2);
		
		ifnot(%1 == "",
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotFov, get(view.fov));
		);
		
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));
	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearch, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		set(defaultfloorplaniteminc-wait,50);
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem.count , inc(defaultfloorplaniteminc),
			if(defaultfloorplaniteminc-wait == defaultfloorplaniteminc,
				add(defaultfloorplaniteminc-wait,50);
				wait(0);
			);
			if(floorPlanSpotSearch == true,
				
				if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
				,
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[fpitemmain].name));
						set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[fpitemmain].name));
					);
				);
			);
			if(floorPlanSpotSearch == true,
				set(defaultspotinc-wait,50);
				for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
					if(defaultspotinc-wait == defaultspotinc,
						add(defaultspotinc-wait,50);
						wait(0);
					);
					if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearch, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems[0].selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems[0].selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="5" type="int" />
		<option name="margin_y" value="5" type="int" />
		<option name="display_title" value="true" type="bool" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="ffffff" type="string" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="background_color" value="ffffff" type="string" />
		<option name="background_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.500007629510948" type="float" />
		<option name="padding" value="15" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="ffffff" type="string" />
		<option name="area_width" value="250" type="int" />
		<option name="area_height" value="400" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea-floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback-floorPlanArea')" type="string" />
		<option name="zorder" value="3" type="int" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady-floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);
	</action>
	
	<action name="openKolorArea-floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			set(ptplugin[floorPlanArea].isOpen, true);
			set(ptplugin[floorPlanArea].visible, true);
			set(ptplugin[floorPlanArea].doNotDeleteMe, false);
			pauseautorotation();
			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea-floorplanDIV"&gt;&lt;/div&gt;));
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea-floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			resumeautorotation();
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
			set(ptplugin[floorPlanArea].isOpen, false);
		);
	</action>
	
	<action name="toggleKolorArea-floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea-floorPlanArea();
		,
			openKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback-floorPlanArea">
		resumeautorotation();
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();
	</action>
	
	<action name="changeTitleKolorArea-floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea-floorPlanArea">
		set(ptplugin[floorPlanArea].visible, true);
		set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		pauseautorotation();
		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	</action>
		
	<action name="hideKolorArea-floorPlanArea">
		resumeautorotation();
		set(ptplugin[floorPlanArea].visible, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
	</action>
	
	<events name="kolorAreaEvents-floorPlanArea" 
		keep="true"
	/>
	
	
  <!-- **************************** -->
  <!-- Thumbnails Stack : panoramas -->
  <!-- **************************** -->


  <krpano stackThumbsallpanoramasIsOpen="false" />

  <events name="stackThumbsallpanoramasEvents"
          onTourStart="stackThumbsallpanoramasBuild();"
          hidetourcontrols="stackThumbsallpanoramasHide();"
          showtourcontrols="stackThumbsallpanoramasShow();"
          hidetourthumbnails="stackThumbsallpanoramasHide();"
          showtourthumbnails="stackThumbsallpanoramasShow();"
          keep="true"/>

  <layer name="stackThumbsallpanoramasMainLayer" type="container" zorder="4" width="1" height="1" alpha="1" keep="true" x="0" y="0" visible="true" align="topright" />

  <action name="stackThumbsallpanoramasHide">
    set(hstcstackThumbsallpanoramasi-wait,25);
    for (set(hstcstackThumbsallpanoramasi, 0), hstcstackThumbsallpanoramasi LT scene.count, inc(hstcstackThumbsallpanoramasi),
      if(hstcstackThumbsallpanoramasi-wait == hstcstackThumbsallpanoramasi,
        add(hstcstackThumbsallpanoramasi-wait, 25);
        wait(0);
      );
      txtadd(thumbname,'stackThumbsallpanoramas_', get(hstcstackThumbsallpanoramasi));
      set(layer[get(thumbname)].visible, false);
    );
  </action>
  <action name="stackThumbsallpanoramasShow">
  if (tour_displaythumbnails, 
    set(sstcstackThumbsallpanoramasi-wait,25);
    for (set(sstcstackThumbsallpanoramasi, 0), sstcstackThumbsallpanoramasi LT scene.count, inc(sstcstackThumbsallpanoramasi),
      if(sstcstackThumbsallpanoramasi-wait == sstcstackThumbsallpanoramasi,
        add(sstcstackThumbsallpanoramasi-wait, 25);
        wait(0);
      );
      txtadd(thumbname,'stackThumbsallpanoramas_', get(sstcstackThumbsallpanoramasi));
      set(layer[get(thumbname)].visible, true);
    );
  );
  </action>

  <action name="stackThumbsallpanoramasMagnify">
    tween(layer[%1].alpha,  1.0, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.05, 0.3, easeInQuad);

      set(layer[%1].effect, glow(0xffffff,1,4,255));
      set(layer[%1].jsborder, '2px solid #ffffff');
  </action>

  <action name="stackThumbsallpanoramasLies">
    tween(layer[%1].alpha, 0.8, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.0, 0.3, easeInQuad);

      set(layer[%1].effect, glow(0xffffff,0.700007629510948,4,255));
      set(layer[%1].jsborder, '2px solid #ffffff');
  </action>


<krpano stackThumbsallpanoramasBuilt="false"/>

  <action name="stackThumbsallpanoramasBuild">
    ifnot (stackThumbsallpanoramasBuilt,
    set(bststackThumbsallpanoramasi-wait,25);
    for (set(bststackThumbsallpanoramasi, 0), bststackThumbsallpanoramasi LT scene.count, inc(bststackThumbsallpanoramasi),
      if(bststackThumbsallpanoramasi-wait == bststackThumbsallpanoramasi,
        add(bststackThumbsallpanoramasi-wait, 25);
        wait(0);
      );

        copy(thumburl, scene[get(bststackThumbsallpanoramasi)].thumburl);
        txtadd(thumbname,'stackThumbsallpanoramas_', get(bststackThumbsallpanoramasi));

        addplugin(get(thumbname));
        set(layer[get(thumbname)].parent, "stackThumbsallpanoramasMainLayer");
        set(layer[get(thumbname)].url   , get(thumburl));
        set(layer[get(thumbname)].keep  , true);
        set(layer[get(thumbname)].align , topright);
        set(layer[get(thumbname)].edge  , center);

        set(layer[get(thumbname)].width , 100);
        set(layer[get(thumbname)].height, 60);

        set(layer[get(thumbname)].alpha , 0.8);
        set(layer[get(thumbname)].visible , false);

        if (bststackThumbsallpanoramasi GE 4, set(reali, 4), set(reali, get(bststackThumbsallpanoramasi)));

        mul(layer[get(thumbname)].x, reali,3);
        mul(layer[get(thumbname)].y, reali,3);

        add(closedthumboffsetx, 10, 50);
        add(layer[get(thumbname)].x, get(closedthumboffsetx));

        add(closedthumboffsety, 10, 30);
        add(layer[get(thumbname)].y, get(closedthumboffsety));

        copy(layer[get(thumbname)].xsmall, layer[get(thumbname)].x);
        copy(layer[get(thumbname)].ysmall, layer[get(thumbname)].y);

        add(layer[get(thumbname)].zorder, 0, bststackThumbsallpanoramasi);
          set(layer[get(thumbname)].effect, glow(0xffffff,0.700007629510948,4,255));
          set(layer[get(thumbname)].jsborder, '2px solid #ffffff');

          set(layer[get(thumbname)].tooltip,get(scene[get(bststackThumbsallpanoramasi)].titleid));

        set(layer[get(thumbname)].thumbpos, get(bststackThumbsallpanoramasi));
        set(layer[get(thumbname)].linkedpano, get(scene[get(bststackThumbsallpanoramasi)].name) );
        set(layer[get(thumbname)].onclick, stackThumbsallpanoramasOpen() );
      );

      set(stackThumbsallpanoramasBuilt, true);

      stackThumbsallpanoramasShow();

      
    );
  </action>

  <action name="stackThumbsallpanoramasOpenThumb">
    if(%2 != NEXT,
      set(pos,0);
      copy(curpos, layer[%1].thumbpos);
      set(xdst, 0);
      set(ydst, 0);
    );
    if (pos LT curpos,
      inc(pos);

        inc(xdst, 210);
        if (ishtml5,
          sub(xmax, stagewidth, 200);
         ,
          sub(xmax, area.pixelwidth, 200);
        );
        dec(xmax, 30);
        if(xdst GT xmax,
          inc(ydst, 130);
          set(xdst,0);
        );

      stackThumbsallpanoramasOpenThumb(%1,NEXT);
     ,
      set(openthumboffsetx, 100);
      add(openthumboffsetx, 10);
      add(xdst, get(openthumboffsetx));

      set(openthumboffsety, 60);
      add(openthumboffsety, 10);
      add(ydst, get(openthumboffsety));

      tween(layer[%1].x, get(xdst) );
      tween(layer[%1].y, get(ydst) );
      tween(layer[%1].width , 200);
      tween(layer[%1].height, 120);
    );
  </action>

  <action name="stackThumbsallpanoramasOpen">
    set(oststackThumbsallpanoramasi-wait,25);
    for (set(oststackThumbsallpanoramasi, 0), oststackThumbsallpanoramasi LT scene.count, inc(oststackThumbsallpanoramasi),
    if(oststackThumbsallpanoramasi-wait == oststackThumbsallpanoramasi,
      add(oststackThumbsallpanoramasi-wait, 25);
      wait(0);
    );
      txtadd(thumbname,'stackThumbsallpanoramas_',get(oststackThumbsallpanoramasi));
      stackThumbsallpanoramasOpenThumb(get(thumbname));
      set(layer[get(thumbname)].onover , stackThumbsallpanoramasMagnify(get(name)); );
      set(layer[get(thumbname)].onout  , stackThumbsallpanoramasLies(get(name)); hideTooltip(); );
      set(layer[get(thumbname)].onhover, showTooltip(topright); );
      set(layer[get(thumbname)].onclick, stackThumbsallpanoramasLies(get(name)); stackThumbsallpanoramasClose(0); mainloadscene(get(linkedpano)); );
    );
    
    set(stackThumbsallpanoramasIsOpen, true);
  </action>

  <action name="stackThumbsallpanoramasClose">
    set(cststackThumbsallpanoramasi-wait,25);
    for (set(cststackThumbsallpanoramasi, 0), cststackThumbsallpanoramasi LT scene.count, inc(cststackThumbsallpanoramasi),
      if(cststackThumbsallpanoramasi-wait == cststackThumbsallpanoramasi,
        add(cststackThumbsallpanoramasi-wait, 25);
        wait(0);
      );
      txtadd(thumbname,'stackThumbsallpanoramas_', get(cststackThumbsallpanoramasi));
      stackThumbsallpanoramasCloseThumb(get(thumbname));
    );
    
    set(stackThumbsallpanoramasIsOpen, false);
  </action>
  <action name="stackThumbsallpanoramasCloseThumb">
    tween(layer[%1].x, get(layer[%1].xsmall));
    tween(layer[%1].y, get(layer[%1].ysmall));
    tween(layer[%1].width , 100);
    tween(layer[%1].height, 60);
    set(layer[%1].alpha  , 0.8  );
    set(layer[%1].onover , NULL );
    set(layer[%1].onout  , NULL );
    set(layer[%1].onhover, NULL );hideTooltip();
    set(layer[%1].onclick, stackThumbsallpanoramasOpen() );
  </action>

<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->
<plugin name="gyroscope"
        url="graphics/gyro.js"
        keep="true"
        devices="tablet|mobile"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="true"
        />

<action name="changeGyroscopeState">
  ifnot (plugin[gyroscope].available === undefined,
    if (plugin[gyroscope].available,
      switch(plugin[gyroscope].enabled);
      if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
    );
  );
</action>

<action name="checkGyroAvailability">
	ifnot (plugin[gyroscope].available === undefined, 
		if (plugin[gyroscope].available,
			set(tour_gyroscopedevices, true);
			events.dispatch(ongyroscopeavailable);
			if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
		,
			set(tour_gyroscopedevices, false);
			set(plugin[gyroscope].enabled, false);
		);
	,
		set(tour_gyroscopedevices, false);
		set(plugin[gyroscope].enabled, false);
	);
</action>
<!-- **************** -->
<!-- Projections Menu -->
<!-- **************** -->
<ptplugin name="projectionMenu" engine="kolorMenu">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="orientation" value="vertical" type="string" />
		<option name="sub_orientation" value="horizontal" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="background_color" value="d6d631" type="string" />
		<option name="background_alpha" value="0.8" type="float" />
		<option name="item_spacer" value="0" type="int" />
		<option name="border_radius" value="0" type="int" />
		<option name="full_size" value="false" type="bool" />

		<option name="item_out_border_radius" value="0" type="int" />
		<option name="item_out_bg_color"      value="d6d631" type="string" />
		<option name="item_out_bg_alpha"      value="0.8" type="float" />
		<option name="item_out_font_color"    value="ffffff" type="string" />
		<option name="item_out_font_family"   value="Arial" type="string" />
		<option name="item_out_font_size"     value="14" type="int" />
		<option name="item_out_font_weight"   value="normal" type="string" />
		<option name="item_out_font_style"    value="normal" type="string" />
		<option name="item_out_font_decoration"    value="normal" type="string" />
		
		<option name="item_hover_border_radius" value="0" type="int" />
		<option name="item_hover_bg_color" value="ffff3c" type="string" />
		<option name="item_hover_bg_alpha"      value="0.8" type="float" />
		<option name="item_hover_font_color"    value="ffffff" type="string" />
		<option name="item_hover_font_family"   value="Arial" type="string" />
		<option name="item_hover_font_size"     value="14" type="int" />
		<option name="item_hover_font_weight"   value="normal" type="string" />
		<option name="item_hover_font_style"    value="normal" type="string" />
		<option name="item_hover_font_decoration"    value="normal" type="string" />
		
		<option name="item_selected_color" value="d6d631" type="string" />
		<option name="item_selected_alpha" value="0.8" type="string" />
		
		<option name="zorder"                   value="6" type="int" />
	</settings>
	<internaldata>
		<group name="projectionMenuButton" titleID="projectionMenumenutitlelabel" thumbnail="" subMenu="true">
			<item name="projViewNormal"        titleID="projectionMenunormallabel" action="invokeKrFunction('setViewNormal();')"        thumbnail=""/>
			<item name="projViewFisheye"       titleID="projectionMenufisheyelabel" action="invokeKrFunction('setViewFisheye();')"       thumbnail=""/>
			<item name="projViewArchitectural" titleID="projectionMenuarchitecturallabel" action="invokeKrFunction('setViewArchitectural();')" thumbnail=""/>
			<item name="projViewStereographic" titleID="projectionMenustereographiclabel" action="invokeKrFunction('setViewStereographic();')" thumbnail=""/>
			<item name="projViewPannini"       titleID="projectionMenupanninilabel" action="invokeKrFunction('setViewPannini();')"       thumbnail=""/>
			<item name="projViewLittlePlanet"  titleID="projectionMenulittleplanetlabel" action="invokeKrFunction('setViewLittlePlanet();')"  thumbnail=""/>
			<item name="projFisheyeBall"       titleID="projectionMenufisheyeballlabel" action="invokeKrFunction('setViewFisheyeBall();')"   thumbnail=""/>

		</group>
	</internaldata>
</ptplugin>

<action name="showKolorMenu-projectionMenu">
	
	js(openKolorMenu(projectionMenu));
</action>

<action name="hideKolorMenu-projectionMenu">
	js(invokePluginFunction(projectionMenu, hideKolorMenu));
</action>

<events name="kolorMenuEvents-projectionMenu" 
		keep="true"
		
		
		onTourStart="js(openKolorMenu(projectionMenu));"
/><action name="setViewPannini">
	stopSetViewTweens();
	setViewPanniniComplete();
</action>

<action name="setViewPanniniComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == false, set(backtonormalfirst,true); );
		if(view.stereographic == false, set(backtonormalfirst,true); );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		set(view.pannini, true);
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75));
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action><action name="setViewFisheye">
	stopSetViewTweens();
	setViewFisheyeComplete();
</action>

<action name="setViewFisheyeComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.30), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.30), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.fovmax, 179, 0.25);
			set(view.fisheyefovlink, 1.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
			tween(view.fisheye, 0.40, distance(1.0, 1.25));
			tween(view.vlookat, get(panoview.v), 1.25);
		);
	);
</action><action name="setViewStereographic">
	stopSetViewTweens();
	setViewStereographicComplete();
</action>

<action name="setViewStereographicComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action>
  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action><action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action><action name="setViewLittlePlanet">
	stopSetViewTweens();
	setViewLittlePlanetComplete();
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0, updateobject(true,true)); );
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action><action name="setViewFisheyeBall">
	stopSetViewTweens();
	setViewFisheyeBallComplete();
</action>

<action name="setViewFisheyeBallComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.30), easeoutquad, 
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.30), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			if(panoview.fovmax LE 179, set(view.fovmax, 179); , set(view.fovmax, get(panoview.fovmax)); );
			tween(view.fov, 179, 4.0, easeInOutQuad );
			tween(view.vlookat, get(panoview.v), 1.25);
			set(display.details, 22);
		);
	);
</action><action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
</action>
</krpano>