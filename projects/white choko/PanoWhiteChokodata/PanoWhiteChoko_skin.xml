<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.17">

<!-- ************ -->
<!-- Double click -->
<!-- ************ -->
  <plugin name="doubleclick" url="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" alturl="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.js" keep="true" ondblclick="ondoubleclick();"/>
  <action name="ondoubleclick">switchFullscreen();

  </action>
<!-- ************ -->
<!-- Context Menu -->
<!-- ************ -->
  <contextmenu fullscreen="false">
    <item name="normal"        onclick="setViewNormal();" separator="true"/>
    <item name="architectural" onclick="setViewArchitectural();"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();"/>
    <item name="fullscreenentry" onclick="enterFullscreen();" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu"/>
  <action name="updateContextMenu">
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    if(tour_fullscreen,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, exitFullscreen(););
     ,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, enterFullscreen(););
    );
  </action>
<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->
<plugin name="gyroscope"
        url="graphics/gyro.js"
        keep="true"
        devices="tablet|mobile"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="true"
        />

<action name="changeGyroscopeState">
  ifnot (plugin[gyroscope].available === undefined,
    if (plugin[gyroscope].available,
      switch(plugin[gyroscope].enabled);
      if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
    );
  );
</action>

<action name="checkGyroAvailability">
	ifnot (plugin[gyroscope].available === undefined, 
		if (plugin[gyroscope].available,
			set(tour_gyroscopedevices, true);
			events.dispatch(ongyroscopeavailable);
			if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
		,
			set(tour_gyroscopedevices, false);
			set(plugin[gyroscope].enabled, false);
		);
	,
		set(tour_gyroscopedevices, false);
		set(plugin[gyroscope].enabled, false);
	);
</action>
	<!-- ***************** -->
	<!-- D-Pad Control Bar -->
	<!-- ***************** -->


<krpano crosscornerbarbarbuilt="false" crosscornerbarhorizontalwidth="0" crosscornerbarverticalheight="0" crosscornerbarIsOpened="false" />

<events name="crosscornerbarevents" onxmlcomplete="crosscornerbarbuildMenuBar();" keep="true"/>

<action name="crosscornerbarbuildMenuBar">
	ifnot (crosscornerbarbarbuilt, crosscornerbarbuildMenu(); set(crosscornerbarbarbuilt, true););
</action>

<action name="crosscornerbarbuildMenu">
	
	
	
	set(crosscornerbarbutton_pos, 10);

		if (device.fullscreensupport,
			set(layer[crosscornerbarbtn_openfs].y, get(crosscornerbarbutton_pos));
			set(layer[crosscornerbarbtn_closefs].y, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
		);
	
		if (device.desktop,
			set(layer[crosscornerbarbtn_ctrlmode_drag_to].y, get(crosscornerbarbutton_pos));
			set(layer[crosscornerbarbtn_ctrlmode_move_to].y, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
		);
	

		set(crosscornerbarDisplayGryoscopeButton, false);
		if (device.tablet, set(crosscornerbarDisplayGryoscopeButton, true););
		if (device.mobile, set(crosscornerbarDisplayGryoscopeButton, true););
		if(crosscornerbarDisplayGryoscopeButton,
			set(layer[crosscornerbarbtn_gyroscope_on].y, get(crosscornerbarbutton_pos));
			set(layer[crosscornerbarbtn_gyroscope_off].y, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
		);

	
		if (device.desktop,
			set(layer[crosscornerbarbtn_out].y, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
				set(layer[crosscornerbarzoom_slider_bg].y, get(crosscornerbarbutton_pos));
				inc(crosscornerbarbutton_pos, 70);
			set(layer[crosscornerbarbtn_in].y, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
		);
	
	

		set(layer[crosscornerbarbtn_autotour_on ].y, get(crosscornerbarbutton_pos));
		set(layer[crosscornerbarbtn_autotour_off].y, get(crosscornerbarbutton_pos));
		inc(crosscornerbarbutton_pos, 40);

	
	if (crosscornerbarbutton_pos != 10,
		set(layer[crosscornerbarmenu_vertical_bg].height, get(crosscornerbarbutton_pos));
		set(layer[crosscornerbarmenu_vertical_bg_border].height, get(crosscornerbarbutton_pos));
		set(crosscornerbarverticalheight, get(crosscornerbarbutton_pos));
	,
		set(layer[crosscornerbarmenu_vertical_bg].height, 0);
	);
	
	
	
	set(crosscornerbarbutton_pos, 10);
	
	
		if (scene.count GT 1,
			set(layer[crosscornerbarbtn_prev_pano].x, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
			
			set(layer[crosscornerbarbtn_next_pano].x, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
		);
	


	
	
	

	
	
	

	
		if (device.desktop,
			set(layer[crosscornerbarbtn_display_help].x, get(crosscornerbarbutton_pos));
			set(layer[crosscornerbarbtn_close_help].x, get(crosscornerbarbutton_pos));
			inc(crosscornerbarbutton_pos, 40);
		);
	
	if (crosscornerbarbutton_pos != 10,
		set(layer[crosscornerbarmenu_horizontal_bg].width, get(crosscornerbarbutton_pos));
		set(layer[crosscornerbarmenu_horizontal_bg_border].width, get(crosscornerbarbutton_pos));
		set(crosscornerbarhorizontalwidth, get(crosscornerbarbutton_pos));
	,
		set(layer[crosscornerbarmenu_horizontal_bg].width, 0);
	);
	
	
	
	
</action>


<events name="crosscornerbarStartTourEvents" onTourStart="crosscornerbarCallOnStartTour();" keep="true" />

<action name="crosscornerbarCallOnStartTour">
	
	crosscornerbarshowMenuControls();
</action>


	<action name="crosscornerbarSetVolumeBarOffsetX">
		
		
		sub(volumeBarPosX, get(layer[crosscornerbarmenu_horizontal_bg].width), get(layer[crosscornerbarVolumeBarContainer].x));
		add(volumeBarPosX, get(layer[get(layer[crosscornerbarVolumeBarContainer].parent)].x));
		sub(volumeBarPosX, get(layer[crosscornerbarVolumeBarContainer].width));
		
		set(layer[crosscornerbarVolumeBarContainer].xoffset, get(volumeBarPosX));
		
		crosscornerbarSetupVolumeBar();
	</action>
	
	
	<action name="crosscornerbarSetupVolumeBar">
		crosscornerbarCalculateSegmentWidth();
		
		for(set(i,0), i LT layer[crosscornerbarVolumeBarContainer].segmentCount, inc(i), 
			crosscornerbarCreateVolumeSegment(get(i));
		);
	</action>
	
	<action name="crosscornerbarCalculateSegmentWidth">
		sub(layer[crosscornerbarVolumeBarContainer].intervalCount, get(layer[crosscornerbarVolumeBarContainer].segmentCount), 1);
		
		mul(totalIntervalWidth, get(layer[crosscornerbarVolumeBarContainer].intervalWidth), get(layer[crosscornerbarVolumeBarContainer].intervalCount));
		
		sub(totalSegmentWidth, get(layer[crosscornerbarVolumeBarContainer].width), get(totalIntervalWidth));
		
		div(layer[crosscornerbarVolumeBarContainer].segmentWidth, get(totalSegmentWidth), get(layer[crosscornerbarVolumeBarContainer].segmentCount));
		
		add(layer[crosscornerbarVolumeBarContainer].incrementPosX, get(layer[crosscornerbarVolumeBarContainer].segmentWidth), get(layer[crosscornerbarVolumeBarContainer].intervalWidth));
		
		div(layer[crosscornerbarVolumeBarContainer].incrementHeight, get(layer[crosscornerbarVolumeBarContainer].height), get(layer[crosscornerbarVolumeBarContainer].segmentCount));
	</action>
	
	<action name="crosscornerbarCreateVolumeSegment">
		set(volumeSegmentName, 'volumeSegment_');
		txtadd(volumeSegmentName, %1);
		
		mul(posX, get(layer[crosscornerbarVolumeBarContainer].incrementPosX), %1);
		
		mul(segmentHeight, get(layer[crosscornerbarVolumeBarContainer].incrementHeight), %1);
		add(segmentHeight, get(layer[crosscornerbarVolumeBarContainer].incrementHeight));
		
		addlayer(get(volumeSegmentName));
		set(layer[get(volumeSegmentName)].keep, true);
		set(layer[get(volumeSegmentName)].type, container);
		set(layer[get(volumeSegmentName)].align, bottomleft);
		set(layer[get(volumeSegmentName)].parent, crosscornerbarVolumeBarContainer);
		set(layer[get(volumeSegmentName)].x, get(posX));
		set(layer[get(volumeSegmentName)].width, get(layer[crosscornerbarVolumeBarContainer].segmentWidth));
		set(layer[get(volumeSegmentName)].height, get(segmentHeight));
		
		set(layer[get(volumeSegmentName)].bgcolor, get(layer[crosscornerbarVolumeBarContainer].lightColor));
		set(layer[get(volumeSegmentName)].bgalpha, 1);
	</action>
	
	<action name="crosscornerbarAdjustHighlightToVolume">
		mul(segmentToHighlight, %1, get(layer[crosscornerbarVolumeBarContainer].segmentCount));
		div(segmentToHighlight, 100);
		Math.ceil(segmentToHighlight); 
		
		for(set(i,0), i LT layer[crosscornerbarVolumeBarContainer].segmentCount, inc(i), 
			set(volumeSegmentName, 'volumeSegment_');
			txtadd(volumeSegmentName, get(i));
			
			if(i LT segmentToHighlight,
				set(layer[get(volumeSegmentName)].bgcolor, get(layer[crosscornerbarVolumeBarContainer].lightColor));
				set(layer[get(volumeSegmentName)].bgalpha, 1.0);
			,
				set(layer[get(volumeSegmentName)].bgcolor, get(layer[crosscornerbarVolumeBarContainer].darkColor));
				set(layer[get(volumeSegmentName)].bgalpha, 0.4);
			);
		);
	</action>
	
	<action name="crosscornerbarVolumeBarClickHandler">
		if(true,
			
			sub(localPosX, stagewidth, get(layer[crosscornerbarVolumeBarContainer].xoffset));
			sub(localPosX, mouse.x);
			sub(localX, get(layer[crosscornerbarVolumeBarContainer].width), get(localPosX));
		,
			
			sub(localX, mouse.x, get(layer[crosscornerbarVolumeBarContainer].xoffset));
		);
		
		mul(percent, get(localX), 100);
		div(percent, get(layer[crosscornerbarVolumeBarContainer].width));
		Math.ceil(percent);
		
		
		setTourSoundsVolume(get(percent));
		
		
		if(tour_soundson == false,
			playTourSounds();
		);
		
		crosscornerbarAdjustHighlightToVolume(get(percent));
	</action>
	


<style name="crosscornerbarbtn_vertical_style"
	keep="true"
	align="bottom"
	onhover="crosscornerbarshowVerticalMenuTooltip();"
    onout="hideTooltip();"
	crop="0| 0|30|30"
	onovercrop="0|30|30|30"
	ondowncrop="0|60|30|30"
	x="0"
	/>
<style name="crosscornerbarbtn_vertical_style_alpha"
	alpha="1.0"
	devices="tablet|mobile"
	/>
<style name="crosscornerbarbtn_vertical_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

<style name="crosscornerbarmenu_bg_alpha"
	alpha="0.2"
	devices="desktop"
	/>
<style name="crosscornerbarmenu_bg_alpha"
	alpha="0.5"
	devices="tablet|mobile"
	/>

<layer name="crosscornerbarmenu_vertical_bg"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_vertical.png"
	keep="true"
	align="bottomright"
	x="64"
	y="178"
	edge="bottom"
	zorder="3"
	scale9grid="12|10|3|40"
	style="crosscornerbarmenu_bg_alpha"
	visible="false"
	/>

<layer name="crosscornerbarmenu_vertical_bg_border"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_vertical.png"
	keep="true"
	align="bottomright"
	x="64"
	y="178"
	edge="bottom"
	zorder="4"
	scale9grid="12|10|3|40"
	onout="crosscornerbarvertical_onout_action();"
	onover="crosscornerbarvertical_onover_action();"
	visible="false"
	>


  <layer name="crosscornerbarbtn_autotour_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_start_automatic_tour.png"
          onclick="startautotour();"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautotourOnTip"
          />
  <layer name="crosscornerbarbtn_autotour_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_stop_automatic_tour.png"
          onclick="stopautotour();"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautotourOffTip"
          />

  <layer name="crosscornerbarbtn_in"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_in.png"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          ondown="set(fov_moveforce, -1);"
          onup="set(fov_moveforce, 0);"
          tooltip="controlBar_dpadzoomInTip"
          visible="false"
          devices="desktop"
          />

  <layer name="crosscornerbarbtn_out"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_out.png"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          ondown="set(fov_moveforce, +1);"
          onup="set(fov_moveforce, 0);"
          tooltip="controlBar_dpadzoomOutTip"
          visible="false"
          devices="desktop"
          />
  <layer name="crosscornerbarzoom_slider_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/slider_bg_vertical.png"
          keep="true"
          align="bottom"
          alpha="0.2"
          visible="false"
          devices="desktop"
          >
    <layer name="crosscornerbarzoom_slider_grip"
           keep="true"
           url="%FIRSTXML%/graphics/crosscornerbar/slider_grip_vertical.png"
           align="top"
           edge="center"
           ondown="crosscornerbarzoom_slider_grip_ondown();"
           />
  </layer>

  <layer name="crosscornerbarbtn_openfs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_enter_fs.png"
          onclick="enterFullscreen();"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          tooltip="controlBar_dpadopenFsTip"
          visible="false"
          devices="fullscreensupport"
          />
  <layer name="crosscornerbarbtn_closefs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_close_fs.png"
          onclick="exitFullscreen();"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadcloseFsTip"
          devices="fullscreensupport"
          />


  <layer name="crosscornerbarbtn_gyroscope_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope.png"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          onclick="disableGyroscope();"
          devices="tablet|mobile"
          visible="false"
            tooltip="controlBar_dpadgyroOffTip"
          />
  <layer name="crosscornerbarbtn_gyroscope_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope.png"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          onclick="enableGyroscope();"
          devices="tablet|mobile"
            tooltip="controlBar_dpadgyroOnTip"
          visible="false"
          />

  <layer name="crosscornerbarbtn_ctrlmode_move_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_move_to.png"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeMoveTip"
          onclick="setControlModeMoveTo();"
          visible="false"
          devices="desktop"
          />
  <layer name="crosscornerbarbtn_ctrlmode_drag_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_drag_to.png"
          style="crosscornerbarbtn_vertical_style|crosscornerbarbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeDragTip"
          onclick="setControlModeDragTo();"
          visible="false"
          devices="desktop"
          />


</layer>

  <action name="crosscornerbarvertical_onout_action">
    set(layer[crosscornerbarmenu_vertical_bg].alpha, 0.2);
    if (device.fullscreensupport,
      set(layer[crosscornerbarbtn_openfs].alpha, 0.2);
      set(layer[crosscornerbarbtn_closefs].alpha, 0.2);
    );
    if (device.desktop,
    set(layer[crosscornerbarbtn_in].alpha, 0.2);
    set(layer[crosscornerbarbtn_out].alpha, 0.2);
    set(layer[crosscornerbarzoom_slider_bg].alpha, 0.2);
    );

    set(layer[crosscornerbarbtn_autotour_off].alpha, 0.2);
    set(layer[crosscornerbarbtn_autotour_on ].alpha, 0.2);

    if (device.desktop,
      set(layer[crosscornerbarbtn_ctrlmode_drag_to].alpha, 0.2);
      set(layer[crosscornerbarbtn_ctrlmode_move_to].alpha, 0.2);
    );
  </action>

  <action name="crosscornerbarvertical_onover_action">
    set(layer[crosscornerbarmenu_vertical_bg].alpha, 1);
    if (device.fullscreensupport,
      set(layer[crosscornerbarbtn_openfs].alpha, 1);
      set(layer[crosscornerbarbtn_closefs].alpha, 1);
    );
    if (device.desktop,
    set(layer[crosscornerbarbtn_in].alpha, 1);
    set(layer[crosscornerbarbtn_out].alpha, 1);
    set(layer[crosscornerbarzoom_slider_bg].alpha, 1);
    );

    set(layer[crosscornerbarbtn_autotour_off].alpha, 1);
    set(layer[crosscornerbarbtn_autotour_on ].alpha, 1);

    if (device.desktop,
      set(layer[crosscornerbarbtn_ctrlmode_drag_to].alpha, 1);
      set(layer[crosscornerbarbtn_ctrlmode_move_to].alpha, 1);
    );
  </action>

  <action name="crosscornerbarhorizontal_onout_action">
    set(layer[crosscornerbarmenu_horizontal_bg].alpha, 0.2);


    if (scene.count GT 1,
    set(layer[crosscornerbarbtn_prev_pano].alpha, 0.2);
    set(layer[crosscornerbarbtn_next_pano].alpha, 0.2);
    );




    if (device.desktop,
      set(layer[crosscornerbarbtn_display_help].alpha, 0.2);
      set(layer[crosscornerbarbtn_close_help].alpha, 0.2);
    ); 
  </action>

  <action name="crosscornerbarhorizontal_onover_action">
    set(layer[crosscornerbarmenu_horizontal_bg].alpha, 1);


    if (scene.count GT 1,
    set(layer[crosscornerbarbtn_prev_pano].alpha, 1);
    set(layer[crosscornerbarbtn_next_pano].alpha, 1);
    );




    if (device.desktop,
      set(layer[crosscornerbarbtn_display_help].alpha, 1);
      set(layer[crosscornerbarbtn_close_help].alpha, 1);
    );
  </action>

  <style name="crosscornerbarbtn_horizontal_style"
         keep="true"
         align="left"
         onhover="crosscornerbarshowHorizontalMenuTooltip();"
         onout="hideTooltip();"
               crop="0| 0|30|30"
         onovercrop="0|30|30|30"
         ondowncrop="0|60|30|30"
         y="0"
         />
<style name="crosscornerbarbtn_horizontal_style_alpha"
	alpha="1.0"
	devices="tablet|mobile"
	/>
<style name="crosscornerbarbtn_horizontal_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

  <layer name="crosscornerbarmenu_horizontal_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_horizontal.png"
          keep="true"
          align="bottomright"
          x="118"
          y="124"
          edge="right"
          zorder="3"
          scale9grid="10|12|40|3"
          style="crosscornerbarmenu_bg_alpha"
          visible="false"
          />

  <layer name="crosscornerbarmenu_horizontal_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_horizontal.png"
          keep="true"
          align="bottomright"
          x="118"
          y="124"
          edge="right"
          zorder="4"
          scale9grid="10|12|40|3"
          onout="crosscornerbarhorizontal_onout_action();"
          onover="crosscornerbarhorizontal_onover_action();"
          visible="false"
          >
    <layer name="crosscornerbarbtn_prev_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_previous_scene.png"
            onclick="loadPreviousScene();"
            style="crosscornerbarbtn_horizontal_style|crosscornerbarbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadprevSceneTip"
            visible="false"
            />
    <layer name="crosscornerbarbtn_next_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_next_scene.png"
            onclick="loadNextScene();"
            style="crosscornerbarbtn_horizontal_style|crosscornerbarbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadnextSceneTip"
            visible="false"
            />




    <layer name="crosscornerbarbtn_display_help"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_help.png"
            onclick="crosscornerbardisplayHelp();"
            style="crosscornerbarbtn_horizontal_style|crosscornerbarbtn_horizontal_style_alpha"
            tooltip="controlBar_dpaddisplayHelpTip"
            devices="desktop"
            visible="false"
            />
    <layer name="crosscornerbarbtn_close_help"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_help.png"
            onclick="crosscornerbarcloseHelp();"
            style="crosscornerbarbtn_horizontal_style|crosscornerbarbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadhideHelpTip"
            devices="desktop"
            visible="false"
            />



  </layer>


	
	<style name="crosscornerbarbtn_navigation_style"
		keep="true"
		onhover="crosscornerbarshowVerticalMenuTooltip();"
		onout="hideTooltip();"
		crop="0|0|30|30"
		onovercrop="0|30|30|30"
		ondowncrop="0|60|30|30"
	/>
	<style name="crosscornerbarbtn_navigation_style_alpha"
		alpha="1.0"
		devices="tablet|mobile"
	/>
	<style name="crosscornerbarbtn_navigation_style_alpha"
		alpha="0.2"
		devices="desktop"
	/>
	
	<layer name="crosscornerbarnavigation_bg"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_move.png"
		align="bottomright"
		x="10"
		y="70"
		keep="true"
		capture="false"
		zorder="3"
		style="crosscornerbarmenu_bg_alpha"
		visible="false"
		/>

  <layer name="crosscornerbarnavigation_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_move.png"
          keep="true"
          align="bottomright"
          x="10"
          y="70"
          capture="false"
          zorder="4"
          onout="crosscornerbarnav_onout_action();"
          onover="crosscornerbarnav_onover_action();"
          visible="false"
          >
    <layer name="crosscornerbarbtn_left"
            ondown="set(hlookat_moveforce, -1);"
            onup="set(hlookat_moveforce, 0);"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_left.png"
            style="crosscornerbarbtn_navigation_style|crosscornerbarbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveLeftTip"
            x="5"
            y="0"
            edge="left"
            align="left"
            visible="false"
             />
    <layer name="crosscornerbarbtn_right"
            ondown="set(hlookat_moveforce, +1);"
            onup="set(hlookat_moveforce, 0);"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_right.png"
            style="crosscornerbarbtn_navigation_style|crosscornerbarbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveRightTip"
            x="5"
            y="0"
            edge="right"
            align="right"
            visible="false"
             />
    <layer name="crosscornerbarbtn_up"
            ondown="set(vlookat_moveforce, -1);"
            onup="set(vlookat_moveforce, 0);"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_up.png"
            style="crosscornerbarbtn_navigation_style|crosscornerbarbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveUpTip"
            x="0"
            y="5"
            align="top"
            edge="top"
            visible="false"
             />
    <layer name="crosscornerbarbtn_down"
            ondown="set(vlookat_moveforce, +1);"
            onup="set(vlookat_moveforce, 0);"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_down.png"
            style="crosscornerbarbtn_navigation_style|crosscornerbarbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveDownTip"
            x="0"
            y="5"
            edge="bottom"
            align="bottom"
            visible="false"
             />

	<layer name="crosscornerbarbtn_hidecontrols"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_hide_controls.png"
		style="crosscornerbarbtn_navigation_style"
		onclick="crosscornerbarhideMenuControls();hideTourControls();"
		edge="center"
		align="center"
		tooltip="controlBar_dpadhideControlsTip"
		visible="false"
		alpha="1.0"
		/>
	<layer name="crosscornerbarbtn_showcontrols"
		onclick="crosscornerbarshowMenuControls();showTourControls();"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_show_controls.png"
		style="crosscornerbarbtn_navigation_style"
		align="center"
		edge="center"
		visible="false"
		alpha="0.5"
		onout="set(alpha, 0.5);"
		onover="set(alpha, 1);"
		tooltip="controlBar_dpaddisplayControlsTip"
		/>
	
</layer>


  <action name="crosscornerbarnav_onout_action">
    set(layer[crosscornerbarnavigation_bg].alpha, 0.2);
    set(layer[crosscornerbarbtn_left].alpha, 0.2);
    set(layer[crosscornerbarbtn_right].alpha, 0.2);
    set(layer[crosscornerbarbtn_up].alpha, 0.2);
    set(layer[crosscornerbarbtn_down].alpha, 0.2);
  </action>

  <action name="crosscornerbarnav_onover_action">
    set(layer[crosscornerbarnavigation_bg].alpha, 1);
    set(layer[crosscornerbarbtn_left].alpha, 1);
    set(layer[crosscornerbarbtn_right].alpha, 1);
    set(layer[crosscornerbarbtn_up].alpha, 1);
    set(layer[crosscornerbarbtn_down].alpha, 1);
  </action>




	<events name="crosscornerbarAutotourEvents"
		onstartautotour="crosscornerbarupdateAutotourButtons();"
		onstopautotour="crosscornerbarupdateAutotourButtons();"
		keep="true"/>
	<action name="crosscornerbarHideAutotourButtons">
		set(layer[crosscornerbarbtn_autotour_off].visible, false);
		set(layer[crosscornerbarbtn_autotour_on].visible , false);
	</action>
	<action name="crosscornerbarShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[crosscornerbarbtn_autotour_off].visible, false);
			set(layer[crosscornerbarbtn_autotour_on].visible , true);
		,
			set(layer[crosscornerbarbtn_autotour_off].visible, true);
			set(layer[crosscornerbarbtn_autotour_on].visible , false);
		);
	</action>
	<action name="crosscornerbarupdateAutotourButtons">
		set(crosscornerbarDisplayAutotourButtons, false);
		if (crosscornerbarIsOpened, set(crosscornerbarDisplayAutotourButtons, true););
		if (crosscornerbarDisplayAutotourButtons,
			crosscornerbarShowAutotourButtons();
		,
			crosscornerbarHideAutotourButtons();
		);
	</action>
	

	<events name="crosscornerbarcontrolmodechangedevent" oncontrolmodechanged="if (crosscornerbarControlModeButtonsActivated,crosscornerbarupdateControlModeButtons(););" onxmlcomplete="set(crosscornerbarControlModeButtonsActivated, true);" keep="true"/>
	<action name="crosscornerbarHideControlModeButtons">
		set(layer[crosscornerbarbtn_ctrlmode_move_to].visible, false);
		set(layer[crosscornerbarbtn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="crosscornerbarShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[crosscornerbarbtn_ctrlmode_drag_to].visible, true);
			set(layer[crosscornerbarbtn_ctrlmode_move_to].visible, false);
		,
			set(layer[crosscornerbarbtn_ctrlmode_move_to].visible, true);
			set(layer[crosscornerbarbtn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="crosscornerbarupdateControlModeButtons">
	if (device.desktop,
		set(crosscornerbarDisplayControlModeButtons, false);
		if (crosscornerbarIsOpened, set(crosscornerbarDisplayControlModeButtons, true););
		if (crosscornerbarDisplayControlModeButtons,
			crosscornerbarShowControlModeButtons();
		,
			crosscornerbarHideControlModeButtons();
		);
	,
		crosscornerbarHideControlModeButtons();
	);
	</action>
	
  <action name="crosscornerbarzoom_slider_grip_dragging">
    if (pressed,
      sub(dy, mouse.stagey, drag_stagey); 
      add(newy, drag_currenty, dy); 

      if(newy LT 0, set(newy, 0) );
      if(newy GT layer[crosscornerbarzoom_slider_bg].pixelheight, copy(newy, layer[crosscornerbarzoom_slider_bg].pixelheight));
      copy(y, newy);

      div(val, newy, layer[crosscornerbarzoom_slider_bg].pixelheight);

      sub(fovrange, view.fovmax, view.fovmin);
      mul(newfov  , val, fovrange);
      add(newfov  , view.fovmin);
      set(view.fov, get(newfov));

      delayedcall(0, crosscornerbarzoom_slider_grip_dragging());
    );
  </action>
  <action name="crosscornerbarzoom_slider_grip_ondown">
    copy(drag_currenty, y);
    copy(drag_stagey, mouse.stagey);
    crosscornerbarzoom_slider_grip_dragging();
  </action>
  <events name="crosscornerbarzoom_slider_events" keep="true" onviewchanged="crosscornerbarzoom_slider_update();" />
  <action name="crosscornerbarzoom_slider_update">
    if (device.desktop,
    ifnot (layer[crosscornerbarzoom_slider_grip].pressed,
      sub(val, view.fov, view.fovmin);
      sub(fovrange, view.fovmax, view.fovmin);
      div(val, fovrange);
      mul(newy, val, layer[crosscornerbarzoom_slider_bg].pixelheight);
      set(layer[crosscornerbarzoom_slider_grip].y, get(newy));
    );
    );
  </action>

	<events name="crosscornerbarmenufullscreenchangeevent"
		onenterfullscreen="crosscornerbarupdateFullscreenButtons();"
		onexitfullscreen="crosscornerbarupdateFullscreenButtons();"
		keep="true"/>
	<action name="crosscornerbarHideFullscreenButtons">
		set(layer[crosscornerbarbtn_openfs].visible , false);
		set(layer[crosscornerbarbtn_closefs].visible, false);
	</action>
	<action name="crosscornerbarShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[crosscornerbarbtn_openfs].visible , false);
				set(layer[crosscornerbarbtn_closefs].visible, true);
			,
				set(layer[crosscornerbarbtn_openfs].visible ,true);
				set(layer[crosscornerbarbtn_closefs].visible,false);
			);
		,
			crosscornerbarHideFullscreenButtons();
		);
	</action>
	<action name="crosscornerbarupdateFullscreenButtons">
		set(crosscornerbarDisplayFullscreenButtons, false);
		if (crosscornerbarIsOpened, set(crosscornerbarDisplayFullscreenButtons, true););
		if (crosscornerbarDisplayFullscreenButtons,
			crosscornerbarShowFullscreenButtons();
		,
			crosscornerbarHideFullscreenButtons();
		);
	</action>
	

  <events name="crosscornerbarbtngyroscopeavailableevents"
          ongyroscopeavailable="crosscornerbarupdateGyroscopeButtonsAvailability();"
          ongyroscopeon="crosscornerbarenableGyroscopeButtons(true);"
          ongyroscopeoff="crosscornerbarenableGyroscopeButtons(false);"
          keep="true"/>
  <krpano crosscornerbarmenugyroscopeavailable="false"
          crosscornerbarmenugyroscopeenabled="false"/>
  <action name="crosscornerbarupdateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(crosscornerbarmenugyroscopeavailable, true);
      crosscornerbarupdateGyroscopeButtons();
    );
  </action>
  <action name="crosscornerbarenableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(crosscornerbarmenugyroscopeenabled, %1);
      crosscornerbarupdateGyroscopeButtons();
    );
  </action>
	<action name="crosscornerbarHideGyroscopeButtons">
		set(layer[crosscornerbarbtn_gyroscope_off].visible, false);
		set(layer[crosscornerbarbtn_gyroscope_on].visible, false);
	</action>
	<action name="crosscornerbarShowGyroscopeButtons">
		if (crosscornerbarmenugyroscopeavailable,
			if (crosscornerbarmenugyroscopeenabled,
				set(layer[crosscornerbarbtn_gyroscope_off].visible, false);
				set(layer[crosscornerbarbtn_gyroscope_on].visible, true);
			,
				set(layer[crosscornerbarbtn_gyroscope_off].visible, true);
				set(layer[crosscornerbarbtn_gyroscope_on].visible, false);
			);
		,
			crosscornerbarHideGyroscopeButtons();
		);
	</action>
	<action name="crosscornerbarupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		set(crosscornerbarDisplayMenuGyroscopeButtons, false);
		if (crosscornerbarIsOpened, set(crosscornerbarDisplayMenuGyroscopeButtons, true););
		if (crosscornerbarDisplayMenuGyroscopeButtons,
			crosscornerbarShowGyroscopeButtons();
		,
			crosscornerbarHideGyroscopeButtons();
		);
	,
		crosscornerbarHideGyroscopeButtons();
	);
	</action>
	


<action name="crosscornerbarhideMenuControls">
		set(crosscornerbarIsOpened, false);
		set(layer[crosscornerbarnavigation_bg].visible, false);
		
			set(layer[crosscornerbarbtn_up].visible, false);
			set(layer[crosscornerbarbtn_down].visible, false);
			set(layer[crosscornerbarbtn_left].visible, false);
			set(layer[crosscornerbarbtn_right].visible, false);
		
		set(layer[crosscornerbarnavigation_bg_border].visible, true);
		tween(layer[crosscornerbarnavigation_bg_border].alpha, 0.5, 1);
		
		
		if(crosscornerbarverticalheight != 0,
			set(layer[crosscornerbarmenu_vertical_bg].visible, false);
				set(layer[crosscornerbarbtn_in].visible, false);
				set(layer[crosscornerbarbtn_out].visible, false);
					set(layer[crosscornerbarzoom_slider_bg].visible, false);

				crosscornerbarupdateGyroscopeButtons();


				crosscornerbarupdateAutotourButtons();

				crosscornerbarupdateFullscreenButtons();
				crosscornerbarupdateControlModeButtons();
			tween(layer[crosscornerbarmenu_vertical_bg_border].alpha , 0, 1);
			tween(layer[crosscornerbarmenu_vertical_bg_border].height , 0, 1, easeOutQuad, set(layer[crosscornerbarmenu_vertical_bg_border].visible, false));
		);
		
		
		if(crosscornerbarhorizontalwidth != 0,
			set(layer[crosscornerbarmenu_horizontal_bg].visible, false);


				if (scene.count GT 1,
					set(layer[crosscornerbarbtn_prev_pano].visible, false);
					set(layer[crosscornerbarbtn_next_pano].visible, false);
				);


				crosscornerbarupdateHelpButtons();


			tween(layer[crosscornerbarmenu_horizontal_bg_border].alpha , 0, 1);
			tween(layer[crosscornerbarmenu_horizontal_bg_border].width, 0, 1, easeOutQuad, set(layer[crosscornerbarmenu_horizontal_bg_border].visible, false));
		);
		set(layer[crosscornerbarbtn_showcontrols].visible, true);
		set(layer[crosscornerbarbtn_hidecontrols].visible, false);
	</action>
	
	<action name="crosscornerbarshowMenuControls">
	set(crosscornerbarIsOpened, true);
    set(layer[crosscornerbarbtn_showcontrols].visible, false);
    set(layer[crosscornerbarbtn_hidecontrols].visible, true);
    set(layer[crosscornerbarnavigation_bg].visible, true);

    set(layer[crosscornerbarbtn_up].visible, true);
    set(layer[crosscornerbarbtn_down].visible, true);
    set(layer[crosscornerbarbtn_left].visible, true);
    set(layer[crosscornerbarbtn_right].visible, true);

    set(layer[crosscornerbarnavigation_bg_border].visible, true);
    tween(layer[crosscornerbarnavigation_bg_border].alpha, 1, 1);

    
    if(crosscornerbarverticalheight != 0,
      set(layer[crosscornerbarmenu_vertical_bg_border].visible, true);
      tween(layer[crosscornerbarmenu_vertical_bg_border].alpha, 1, 1);
      tween(layer[crosscornerbarmenu_vertical_bg_border].height, get(crosscornerbarverticalheight), 1, easeOutQuad,
        set(layer[crosscornerbarmenu_vertical_bg].visible, true);
        crosscornerbarupdateFullscreenButtons();

        crosscornerbarupdateAutotourButtons();

        if (device.desktop,
        set(layer[crosscornerbarbtn_in].visible, true);
        set(layer[crosscornerbarbtn_out].visible, true);
        set(layer[crosscornerbarzoom_slider_bg].visible, true);
        );

        crosscornerbarupdateGyroscopeButtons();

      );
    );

    
    if(crosscornerbarhorizontalwidth != 0,
      set(layer[crosscornerbarmenu_horizontal_bg_border].visible, true);
      tween(layer[crosscornerbarmenu_horizontal_bg_border].alpha, 1, 1);
      tween(layer[crosscornerbarmenu_horizontal_bg_border].width, get(crosscornerbarhorizontalwidth), 1, easeOutQuad,
        set(layer[crosscornerbarmenu_horizontal_bg].visible, true);


        if (scene.count GT 1,
          set(layer[crosscornerbarbtn_prev_pano].visible, true);
          set(layer[crosscornerbarbtn_next_pano].visible, true);
        );
        crosscornerbarupdateControlModeButtons();




        crosscornerbarupdateHelpButtons();


      );
    );
  </action>

  <layer name="crosscornerbarhelpScreen"
         url="%FIRSTXML%/graphics/crosscornerbar/help_screen_bg.png"
         keep="true"
         align="bottomright"
	     x="110"
	     y="170"
         zorder="97"
         onclick="crosscornerbarcloseHelp();"
         visible="false"
         width="prop"
         height="10%"
         alpha="0.0"
         onout="set(alpha, 0.2);"
         onover="stoptween(alpha);set(alpha, 1.0);"
         displayed="false"
         maxwidth="0"
		 maxheight="0"
         />
  <layer name="crosscornerbarhelpScreenFg"
         url="%FIRSTXML%/graphics/crosscornerbar/help_screen_fg.png"
         width="prop"
         height="10%"
         x="110"
	     y="170"
         keep="true"
         enabled="false"
         capture="false"
         align="bottomright"
         zorder="98"
         onclick="crosscornerbarcloseHelp();"
         visible="false"
         alpha="0.0"
         />

  <action name="crosscornerbardisplayHelp">
    if (device.desktop,
    set(layer[crosscornerbarhelpScreen].displayed, true);
    set(layer[crosscornerbarhelpScreen].visible, true);
    set(layer[crosscornerbarhelpScreenFg].visible, true);
    tween(layer[crosscornerbarhelpScreen].height, 50%, 1);
    tween(layer[crosscornerbarhelpScreenFg].height, 50%, 1);
    tween(layer[crosscornerbarhelpScreen].alpha, 0.2, 1);
    tween(layer[crosscornerbarhelpScreenFg].alpha, 1.0, 1);
    crosscornerbarupdateHelpButtons();
    );
  </action>
  <action name="crosscornerbarcloseHelp">
    if (device.desktop,
    set(layer[crosscornerbarhelpScreen].displayed, false);
    tween(layer[crosscornerbarhelpScreen].alpha, 0.0, 1);
    tween(layer[crosscornerbarhelpScreenFg].alpha, 0.0, 1);
    tween(layer[crosscornerbarhelpScreen].height, 10%, 1, easeOutQuad,
    set(layer[crosscornerbarhelpScreen].visible, false);
    );
    tween(layer[crosscornerbarhelpScreenFg].height, 10%, 1, easeOutQuad,
    set(layer[crosscornerbarhelpScreenFg].visible, false);
    );
    crosscornerbarupdateHelpButtons();
    );
  </action>
	<action name="crosscornerbarHideHelpButtons">
		set(layer[crosscornerbarbtn_display_help].visible, false);
		set(layer[crosscornerbarbtn_close_help].visible, false);
	</action>
	<action name="crosscornerbarShowHelpButtons">
		if (layer[crosscornerbarhelpScreen].displayed,
			set(layer[crosscornerbarbtn_close_help].visible, true);
			set(layer[crosscornerbarbtn_display_help].visible, false);
		,
			set(layer[crosscornerbarbtn_display_help].visible, true);
			set(layer[crosscornerbarbtn_close_help].visible, false);
		);
	</action>
	<action name="crosscornerbarupdateHelpButtons">
	if (device.desktop,
		set(crosscornerbarDisplayHelpButtons, false);
		if (crosscornerbarIsOpened, set(crosscornerbarDisplayHelpButtons, true););
		if (crosscornerbarDisplayHelpButtons,
			crosscornerbarShowHelpButtons();
		,
			crosscornerbarHideHelpButtons();
		);
	,
		crosscornerbarHideHelpButtons();
	);
	</action>
  


  <action name="crosscornerbarshowHorizontalMenuTooltip">
    if (tooltip !== null, showTooltip(bottomright, crosscornerbarhorizMenuTooltipStyle, bottom););
  </action>
  <action name="crosscornerbarshowVerticalMenuTooltip">
    if (tooltip !== null, showTooltip(bottomright, crosscornerbarverticalMenuTooltipStyle, right););
  </action>

  <textstyle name="crosscornerbarhorizMenuTooltipStyle"
             font="Times New Roman"
             fontsize="14"
             bold="true"
             italic="false"
             textcolor="0xffffff"
             background="true"
             backgroundcolor="0x434343"
             alpha="0.8"
             blendmode="normal"
		     effect="glow(0x434343,1,10,100); "
             origin="cursor"
             textalign="center"
             border="0"
             xoffset="0"
             edge="bottom"
             yoffset="-25"
             devices="flash"
             noclip="true"/>

  <textstyle name="crosscornerbarverticalMenuTooltipStyle"
             font="Times New Roman"
             fontsize="14"
             bold="true"
             italic="false"
             textcolor="0xffffff"
             background="true"
             backgroundcolor="0x434343"
             alpha="0.8"
             blendmode="normal"
		     effect="glow(0x434343,1,10,100); "
             origin="cursor"
             edge="right"
             textalign="right"
             xoffset="-25"
             border="0"
             yoffset="0"
             devices="flash"
             noclip="true"/>

  <layer name="crosscornerbarhorizMenuTooltipStyle"
	     keep="true"
	     enabled="false"
	     capture="false"
	     url="%FIRSTXML%/graphics/textfield.swf"
	     align="center"
	     background="true"
	     backgroundcolor="0x434343"
	     border="true"
	     bordercolor="0x434343"
	     css="color:#ffffff;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:center;"
	     width="200"
	     height="20"
	     autoheight="true"
         edge="bottom"
	     yoffset="-25"
	     xoffset="0"
	     selectable="false"
	     zorder="0"
	     visible="false"
	     html=""
	     devices="html5"
         />
  <layer name="crosscornerbarverticalMenuTooltipStyle"
	     keep="true"
	     enabled="false"
	     capture="false"
	     url="%FIRSTXML%/graphics/textfield.swf"
	     align="center"
	     background="true"
	     backgroundcolor="0x434343"
	     border="true"
	     bordercolor="0x434343"
	     css="color:#ffffff;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:center;"
	     width="200"
	     height="20"
	     autoheight="true"
         edge="right"
	     xoffset="-25"
	     yoffset="0"
	     selectable="false"
	     zorder="0"
	     visible="false"
	     html=""
	     devices="html5"
         />






  <!-- ****** -->
  <!-- Footer -->
  <!-- ****** -->
  <layer name="footer"
         keep="true"
         url="%FIRSTXML%/graphics/footer/footer.png" 
         bgalpha="1"
         align="bottom"
         x="0"
         y="0"
         zorder="5"
         enabled="false"
         capture="true"
         visible="false"

         width="100%"

         />

  <events name="footerevents" 
    onTourStart="showfooter();"
    keep="true" />

  <action name="showfooter">
    set(layer[footer].visible, true);
  </action>

	<!-- ************** -->
	<!-- Thumbnails Bar -->
	<!-- ************** -->




<layer name="thumbnailsBar-thumbnailsBar" 
	keep="true" 
	type="container" 
	visible="false"
	align="bottomleft" 
	
		width="100%" 
		height="0" 
	
	x="0"
	y="-5"
	
	bgcolor="0xdedede"
	bgalpha="0.100007629510948"
	
	zorder="6"
/>



<layer name="thumbnailBorderSource-thumbnailsBar"
	keep="true"
	visible="false"
	
	borderWidth="2"
	borderColorDefault="0xe6e6e6" 
	borderColorHover="0xff7d00"
	borderColorSelected="0xff7d00"
	borderAlphaDefault="0.500007629510948" 
	borderAlphaHover="1"
	borderAlphaSelected="1"
	
	url=""
	offsetX="0"
	offsetY="0"
	quarterHeight="0"
/>


	<krpano arrow1Loaded-thumbnailsBar="false" arrow2Loaded-thumbnailsBar="false" borderLoaded-thumbnailsBar="false" thumbnailsLoadedCounter-thumbnailsBar="0" thumbsCount-thumbnailsBar="0" thumbsCounter-thumbnailsBar="0" firstInit-thumbnailsBar="false" />
	
	
	<events name="thumbnailsScrollEvents-thumbnailsBar" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize-thumbnailsBar,set(isLoaded-thumbnailsBar, true);if(isStarted-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onTourStart="set(isStarted-thumbnailsBar, true);if(isLoaded-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar(););"
		onnewpano="if(startResize-thumbnailsBar,if(firstInit-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onresize="onResizeHandler-thumbnailsBar();"
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
	/>
	
	
	<layer name="scrollAreaContainer-thumbnailsBar" 
		keep="true"
		type="container" 
		align="topleft"
		x="10"
		y="10"
		
		marginX="10"
		marginY="10"
		
		width="0" 
		height="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar-thumbnailsBar"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="80"
		itemHeight="40"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="10"
		currentThumbsCount="0"
		
		adjustToContent="false"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea-thumbnailsBar" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="bottomleft"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="h" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		tagertWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow1);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_left.png"
			align="left"
	/>
	
	
	
	<layer name="scrollNextArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow2);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_right.png"
			align="right"
	/>
	
	<action name="loadedImages-thumbnailsBar">
		if(%1 == "arrow1",
			set(arrow1Loaded-thumbnailsBar, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded-thumbnailsBar, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(borderLoaded-thumbnailsBar, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter-thumbnailsBar);
		);
	</action>
	
	<action name="onLoadCompleteHandler-thumbnailsBar">
		
		set(thumbsCount-thumbnailsBar, 0);
		
		
		set(thumbsCount-thumbnailsBar, get(scene.count));
		
		
		
		
		
		loadThumbs-thumbnailsBar();
		
		if(firstInit-thumbnailsBar,
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			onLoadCompleteHandlerPartTwo-thumbnailsBar();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo-thumbnailsBar">
		set(imgCounter-thumbnailsBar, 3);
		
		if(arrow1Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(arrow2Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(thumbsCount-thumbnailsBar == thumbnailsLoadedCounter-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadComplete-thumbnailsBar);
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadComplete-thumbnailsBar, 0.2, onLoadCompleteHandlerPartTwo-thumbnailsBar());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree-thumbnailsBar">
		resetMouseBehavior-thumbnailsBar();
		highlightCurrentThumb-thumbnailsBar();
		
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			mul(adjustWidth-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginX), 2);
			add(adjustWidth-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width));
			mul(adjustHeight-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginY), 2);
			add(adjustHeight-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].height));
			
			
			if(adjustWidth-thumbnailsBar GT stagewidth,
				set(adjustWidth-thumbnailsBar, get(stagewidth));
				set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
			,
				if(adjustHeight-thumbnailsBar GT stageheight,
					set(adjustHeight-thumbnailsBar, get(stageheight));
					set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
				);
			);
			
			setSize-thumbnailsBar(get(adjustWidth-thumbnailsBar), get(adjustHeight-thumbnailsBar));
		);
		
		setupArrows-thumbnailsBar(true);
		
		
		if (thumbsCounter-thumbnailsBar LE 0,
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		);
		
		
		set(startResize-thumbnailsBar, true);
		set(firstInit-thumbnailsBar, true);
	</action>
	
	
	<action name="onResizeHandler-thumbnailsBar">
		
		delayedcall(0.1, onResizeCallback-thumbnailsBar(false); );
	</action>
	
	
	<action name="onResizeCallback-thumbnailsBar">
		if(startResize-thumbnailsBar,
			setSize-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].targetWidth), get(layer[scrollAreaContainer-thumbnailsBar].targetHeight));
			setupArrows-thumbnailsBar(%1);
			
			
			if (thumbsCounter-thumbnailsBar LE 0,
				set(layer[thumbnailsBar-thumbnailsBar].visible, false);
			);
		);
	</action>
	
	
	
	
	
	
	<action name="thumbnailBorderDrawInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
	</action>
		
	
	<action name="thumbnailBorderImageInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		
		
		div(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight, get(layer[thumbnailBorderSource-thumbnailsBar].height), 4);
		
		
		set(cropX-thumbnailsBar, 0);
		set(cropY-thumbnailsBar, 0);
		set(cropW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width));
		set(cropH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropDefault, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));

		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropHover, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropSelected, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropVisited, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		set(scaleX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(scaleY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		sub(scaleW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width), get(totalOffsetX-thumbnailsBar));
		sub(scaleH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight), get(totalOffsetY-thumbnailsBar));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].scale9grid, get(scaleX-thumbnailsBar), '|', get(scaleY-thumbnailsBar), '|', get(scaleW-thumbnailsBar), '|', get(scaleH-thumbnailsBar));
	</action>
	
	
	<action name="loadThumbs-thumbnailsBar">
		
		

		loadThumbsPartTwo-thumbnailsBar();
	</action>
	
	<action name="loadThumbsPartTwo-thumbnailsBar">
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(imgCounter-thumbnailsBar, 1);
		,
			set(imgCounter-thumbnailsBar, 0);
		);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			if(borderLoaded-thumbnailsBar,
				dec(imgCounter-thumbnailsBar);
			);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar);
			loadThumbsPartThree-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar, 0.2, loadThumbsPartTwo-thumbnailsBar());
		);
	</action>
	
	<action name="loadThumbsPartThree-thumbnailsBar">
		ifnot(layer[scrollAreaContainer-thumbnailsBar].ready,
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				thumbnailBorderImageInit-thumbnailsBar();
			,
				thumbnailBorderDrawInit-thumbnailsBar();
			);
			
			
			set(thumbsCounter-thumbnailsBar, 0);
			
			
			set(i-thumbnailsBar-wait,25);
			
			
				for( set(i-thumbnailsBar, 0), i-thumbnailsBar LT scene.count, inc(i-thumbnailsBar),
					if(i-thumbnailsBar-wait == i-thumbnailsBar,
						add(i-thumbnailsBar-wait,25);
						wait(0);
					);
					createThumb-thumbnailsBar(get(scene[get(i-thumbnailsBar)].name), get(scene[get(i-thumbnailsBar)].thumburl), get(i-thumbnailsBar), get(scene[get(i-thumbnailsBar)].titleid));
					inc(thumbsCounter-thumbnailsBar);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount, get(thumbsCounter-thumbnailsBar));
			
			
			setSize-thumbnailsBar(get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width), get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height));
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].visible, true);
			
			
					set(layer[thumbnailsBar-thumbnailsBar].visible, true);
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].ready, true);
		);
	</action>
	
	
	<action name="setSize-thumbnailsBar">
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].targetWidth, %1);
		set(layer[scrollAreaContainer-thumbnailsBar].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height, %2);
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		mul(totalMarginX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].x), 2);
		mul(totalMarginY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].y), 2);
		
			add(totalPluginHeight-thumbnailsBar, get(totalMarginY-thumbnailsBar), get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight LT totalPluginHeight-thumbnailsBar,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height, get(totalPluginHeight-thumbnailsBar));
			);
		
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		sub(containerWidth-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalMarginX-thumbnailsBar));
		sub(containerHeight-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight), get(totalMarginY-thumbnailsBar));

		
		set(layer[scrollAreaContainer-thumbnailsBar].width, get(containerWidth-thumbnailsBar));
		set(layer[scrollAreaContainer-thumbnailsBar].height, get(containerHeight-thumbnailsBar));
		
		set(scrollAreaSize-thumbnailsBar, 0);
		
		
		mul(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		sub(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, true);
		

			mul(scrollAreaSize-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth), get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount));
			add(scrollAreaSize-thumbnailsBar, get(totalThumbsSpacer-thumbnailsBar));
			
			set(layer[thumbsScrollArea-thumbnailsBar].width, get(scrollAreaSize-thumbnailsBar));
			set(layer[thumbsScrollArea-thumbnailsBar].height, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
			
			
			if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[scrollAreaContainer-thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility-thumbnailsBar();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility-thumbnailsBar">
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible,
			set(boolValue-thumbnailsBar, false);
			
					set(boolValue-thumbnailsBar, true);
			
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, get(boolValue-thumbnailsBar));
		);
	</action>
	
	
	<action name="createThumb-thumbnailsBar">

			add(offsetFactor-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
	
			mul(thumbIncPos-thumbnailsBar, %3, get(offsetFactor-thumbnailsBar));
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				add(thumbIncPos-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetX));
			);
			
		
		mul(negativeOffsetX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetX), -1);
		mul(negativeOffsetY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea-thumbnailsBar);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages-thumbnailsBar("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer-thumbnailsBar].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer-thumbnailsBar].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer-thumbnailsBar].offsetY));
		
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea-thumbnailsBar);
				set(layer[get(thumbName)].x, get(thumbIncPos-thumbnailsBar));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer-thumbnailsBar].offsetX));
				set(layer[get(thumbName)].onclick, mainloadscene(%1); resetMouseBehavior-thumbnailsBar(); highlightThumb-thumbnailsBar(%1));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource-thumbnailsBar].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource-thumbnailsBar].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX-thumbnailsBar));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY-thumbnailsBar));
			set(layer[get(thumbBorderName)].onclick, mainloadscene(%1); resetMouseBehavior-thumbnailsBar(); highlightThumb-thumbnailsBar(%1));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos-thumbnailsBar)); 
				
		);
		
		
		setupMouseBehavior-thumbnailsBar(%1, %4);
		
	</action>
	
	
	<action name="removeThumb-thumbnailsBar">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		removelayer(get(thumbBorderName));
	</action>
	
	
	
	<action name="setupArrows-thumbnailsBar">
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			hideArrows-thumbnailsBar();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[thumbsScrollArea-thumbnailsBar].width,
				
					showArrows-thumbnailsBar();
				,
					hideArrows-thumbnailsBar();
				);
			,
				hideArrows-thumbnailsBar();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb-thumbnailsBar();
		);
		
		
			
			if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[scrollAreaContainer-thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows-thumbnailsBar">
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, true);
		set(layer[scrollNextArrow-thumbnailsBar].visible, true);
		
		
		
			
			add(totalArrowSize-thumbnailsBar, get(layer[scrollPrevArrow-thumbnailsBar].width), get(layer[scrollNextArrow-thumbnailsBar].width));
		
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalArrowSize-thumbnailsBar));
		
			set(layer[scrollAreaContainer-thumbnailsBar].width, get(scrollAreaContainerSize-thumbnailsBar));
			
			set(layer[scrollAreaContainer-thumbnailsBar].x, get(layer[scrollPrevArrow-thumbnailsBar].width));
			
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onhover, scrollPrev-thumbnailsBar(););
		set(layer[scrollNextArrow-thumbnailsBar].onhover, scrollNext-thumbnailsBar(););
		
		set(layer[scrollPrevArrow-thumbnailsBar].onclick, scrollPrev-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow-thumbnailsBar].onclick, scrollNext-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		set(layer[scrollNextArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows-thumbnailsBar">
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, false);
		set(layer[scrollNextArrow-thumbnailsBar].visible, false);
		
		

			mul(totalMargin-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginX), 2);
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalMargin-thumbnailsBar));

			set(layer[scrollAreaContainer-thumbnailsBar].width, get(scrollAreaContainerSize-thumbnailsBar));
			set(layer[scrollAreaContainer-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
		set(scrollLimit-thumbnailsBar, 0);
		
		
			
			
			add(layer[thumbsScrollArea-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].x GE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].x, get(scrollLimit-thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
			
			sub(scrollLimit-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width), get(layer[scrollAreaContainer-thumbnailsBar].width));
			
			mul(scrollLimit-thumbnailsBar, -1);
			
			sub(layer[thumbsScrollArea-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].x LE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].x, get(scrollLimit-thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior-thumbnailsBar">
	
		
		
		
		set(j-thumbnailsBar-wait,25);
		
			for( set(j-thumbnailsBar, 0), j-thumbnailsBar LT scene.count, inc(j-thumbnailsBar),
				if(j-thumbnailsBar-wait == j-thumbnailsBar,
					add(j-thumbnailsBar-wait,25);
					wait(0);
				);
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j-thumbnailsBar)].name));
				txtadd(thumbBorderName, '-thumbnailsBar');
				
				setupMouseBehavior-thumbnailsBar(get(scene[get(j-thumbnailsBar)].name), get(scene[get(j-thumbnailsBar)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior-thumbnailsBar">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showToolTip(get(align), ));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showToolTip(get(align), ));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb-thumbnailsBar">
			highlightThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="highlightThumb-thumbnailsBar">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '-thumbnailsBar');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb-thumbnailsBar(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb-thumbnailsBar">
			scrollToThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb-thumbnailsBar">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');

			set(posX-thumbnailsBar, 0);
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				div(halfThumbWidth-thumbnailsBar, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posX-thumbnailsBar, get(layer[get(thumbName)].x), get(halfThumbWidth-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(get(posX-thumbnailsBar), 0);
				);
			,
				div(halfThumbWidth-thumbnailsBar, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posX-thumbnailsBar, get(layer[get(thumbBorderName)].x), get(halfThumbWidth-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(get(posX-thumbnailsBar), 0);
				);
			);
		
	</action>




  <!-- ************************ -->
  <!-- Title : current panorama -->
  <!-- ************************ -->

  <events name="title_currentpanorama_events" 
    onTourStart="showtitle_currentpanorama();"
    hidetourcontrols="hidetitle_currentpanorama();" 
    showtourcontrols="showtitle_currentpanorama();" 
    onnewpano="updatetitle_currentpanorama();" 
    keep="true" />

  <action name="hidetitle_currentpanorama">set(layer[title_currentpanorama].visible, false);</action>
  <action name="showtitle_currentpanorama">set(layer[title_currentpanorama].visible, true );</action>

  <action name="updatetitle_currentpanorama">
    getmessage(layer[title_currentpanorama].html, get(scene[get(xml.scene)].titleid));
    escape(layer[title_currentpanorama].html);
  </action>
  <layer name="title_currentpanorama" keep="true" zorder="7"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="bottomleft" x="10" y="60" width="100%" autoheight="true"
         background="false" capture="false" handcursor="false" selectable="false" enabled="false"
         borderwidth="0"
         alpha="1"
         visible="false"
         textshadow="1"
         css="text-align:left;
              color:#ffffff;
              font-family:Times New Roman;
              font-style:italic;
              font-weight:bold;
              font-size:24px;"/>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enableGyroscope">
    changeGyroscopeState();
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState();
  </action><action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action><action name="setViewLittlePlanet">
	stopSetViewTweens();
	setViewLittlePlanetComplete();
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0, updateobject(true,true)); );
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action><action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
</action>
</krpano>