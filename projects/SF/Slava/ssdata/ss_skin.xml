<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.17">

  <!-- **************************** -->
  <!-- Thumbnails Stack : panoramas -->
  <!-- **************************** -->


  <krpano stackThumbsallpanoramasIsOpen="false" />

  <events name="stackThumbsallpanoramasEvents"
          onTourStart="stackThumbsallpanoramasBuild();"
          hidetourcontrols="stackThumbsallpanoramasHide();"
          showtourcontrols="stackThumbsallpanoramasShow();"
          hidetourthumbnails="stackThumbsallpanoramasHide();"
          showtourthumbnails="stackThumbsallpanoramasShow();"
          keep="true"/>

  <layer name="stackThumbsallpanoramasMainLayer" type="container" zorder="0" width="1" height="1" alpha="1" keep="true" x="0" y="0" visible="true" align="topright" />

  <action name="stackThumbsallpanoramasHide">
    set(hstcstackThumbsallpanoramasi-wait,25);
    for (set(hstcstackThumbsallpanoramasi, 0), hstcstackThumbsallpanoramasi LT scene.count, inc(hstcstackThumbsallpanoramasi),
      if(hstcstackThumbsallpanoramasi-wait == hstcstackThumbsallpanoramasi,
        add(hstcstackThumbsallpanoramasi-wait, 25);
        wait(0);
      );
      txtadd(thumbname,'stackThumbsallpanoramas_', get(hstcstackThumbsallpanoramasi));
      set(layer[get(thumbname)].visible, false);
    );
  </action>
  <action name="stackThumbsallpanoramasShow">
  if (tour_displaythumbnails, 
    set(sstcstackThumbsallpanoramasi-wait,25);
    for (set(sstcstackThumbsallpanoramasi, 0), sstcstackThumbsallpanoramasi LT scene.count, inc(sstcstackThumbsallpanoramasi),
      if(sstcstackThumbsallpanoramasi-wait == sstcstackThumbsallpanoramasi,
        add(sstcstackThumbsallpanoramasi-wait, 25);
        wait(0);
      );
      txtadd(thumbname,'stackThumbsallpanoramas_', get(sstcstackThumbsallpanoramasi));
      set(layer[get(thumbname)].visible, true);
    );
  );
  </action>

  <action name="stackThumbsallpanoramasMagnify">
    tween(layer[%1].alpha,  1.0, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.05, 0.3, easeInQuad);

      set(layer[%1].effect, glow(0xffffff,1,4,255));
      set(layer[%1].jsborder, '2px solid #ffffff');
  </action>

  <action name="stackThumbsallpanoramasLies">
    tween(layer[%1].alpha, 0.8, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.0, 0.3, easeInQuad);

      set(layer[%1].effect, glow(0xffffff,0.2,4,255));
      set(layer[%1].jsborder, '2px solid #ffffff');
  </action>


<krpano stackThumbsallpanoramasBuilt="false"/>

  <action name="stackThumbsallpanoramasBuild">
    ifnot (stackThumbsallpanoramasBuilt,
    set(bststackThumbsallpanoramasi-wait,25);
    for (set(bststackThumbsallpanoramasi, 0), bststackThumbsallpanoramasi LT scene.count, inc(bststackThumbsallpanoramasi),
      if(bststackThumbsallpanoramasi-wait == bststackThumbsallpanoramasi,
        add(bststackThumbsallpanoramasi-wait, 25);
        wait(0);
      );

        copy(thumburl, scene[get(bststackThumbsallpanoramasi)].thumburl);
        txtadd(thumbname,'stackThumbsallpanoramas_', get(bststackThumbsallpanoramasi));

        addplugin(get(thumbname));
        set(layer[get(thumbname)].parent, "stackThumbsallpanoramasMainLayer");
        set(layer[get(thumbname)].url   , get(thumburl));
        set(layer[get(thumbname)].keep  , true);
        set(layer[get(thumbname)].align , topright);
        set(layer[get(thumbname)].edge  , center);

        set(layer[get(thumbname)].width , 50);
        set(layer[get(thumbname)].height, 25);

        set(layer[get(thumbname)].alpha , 0.8);
        set(layer[get(thumbname)].visible , false);

        if (bststackThumbsallpanoramasi GE 4, set(reali, 4), set(reali, get(bststackThumbsallpanoramasi)));

        mul(layer[get(thumbname)].x, reali,3);
        mul(layer[get(thumbname)].y, reali,3);

        add(closedthumboffsetx, 10, 25);
        add(layer[get(thumbname)].x, get(closedthumboffsetx));

        add(closedthumboffsety, 10, 12);
        add(layer[get(thumbname)].y, get(closedthumboffsety));

        copy(layer[get(thumbname)].xsmall, layer[get(thumbname)].x);
        copy(layer[get(thumbname)].ysmall, layer[get(thumbname)].y);

        add(layer[get(thumbname)].zorder, 0, bststackThumbsallpanoramasi);
          set(layer[get(thumbname)].effect, glow(0xffffff,0.2,4,255));
          set(layer[get(thumbname)].jsborder, '2px solid #ffffff');

          set(layer[get(thumbname)].tooltip,get(scene[get(bststackThumbsallpanoramasi)].titleid));

        set(layer[get(thumbname)].thumbpos, get(bststackThumbsallpanoramasi));
        set(layer[get(thumbname)].linkedpano, get(scene[get(bststackThumbsallpanoramasi)].name) );
        set(layer[get(thumbname)].onclick, stackThumbsallpanoramasOpen() );
      );

      set(stackThumbsallpanoramasBuilt, true);

      stackThumbsallpanoramasShow();

      
    );
  </action>

  <action name="stackThumbsallpanoramasOpenThumb">
    if(%2 != NEXT,
      set(pos,0);
      copy(curpos, layer[%1].thumbpos);
      set(xdst, 0);
      set(ydst, 0);
    );
    if (pos LT curpos,
      inc(pos);

        inc(xdst, 110);
        if (ishtml5,
          sub(xmax, stagewidth, 100);
         ,
          sub(xmax, area.pixelwidth, 100);
        );
        dec(xmax, 30);
        if(xdst GT xmax,
          inc(ydst, 60);
          set(xdst,0);
        );

      stackThumbsallpanoramasOpenThumb(%1,NEXT);
     ,
      set(openthumboffsetx, 50);
      add(openthumboffsetx, 10);
      add(xdst, get(openthumboffsetx));

      set(openthumboffsety, 25);
      add(openthumboffsety, 10);
      add(ydst, get(openthumboffsety));

      tween(layer[%1].x, get(xdst) );
      tween(layer[%1].y, get(ydst) );
      tween(layer[%1].width , 100);
      tween(layer[%1].height, 50);
    );
  </action>

  <action name="stackThumbsallpanoramasOpen">
    set(oststackThumbsallpanoramasi-wait,25);
    for (set(oststackThumbsallpanoramasi, 0), oststackThumbsallpanoramasi LT scene.count, inc(oststackThumbsallpanoramasi),
    if(oststackThumbsallpanoramasi-wait == oststackThumbsallpanoramasi,
      add(oststackThumbsallpanoramasi-wait, 25);
      wait(0);
    );
      txtadd(thumbname,'stackThumbsallpanoramas_',get(oststackThumbsallpanoramasi));
      stackThumbsallpanoramasOpenThumb(get(thumbname));
      set(layer[get(thumbname)].onover , stackThumbsallpanoramasMagnify(get(name)); );
      set(layer[get(thumbname)].onout  , stackThumbsallpanoramasLies(get(name)); hideTooltip(); );
      set(layer[get(thumbname)].onhover, showTooltip(topright); );
      set(layer[get(thumbname)].onclick, stackThumbsallpanoramasLies(get(name)); stackThumbsallpanoramasClose(0); mainloadscene(get(linkedpano)); );
    );
    
    set(stackThumbsallpanoramasIsOpen, true);
  </action>

  <action name="stackThumbsallpanoramasClose">
    set(cststackThumbsallpanoramasi-wait,25);
    for (set(cststackThumbsallpanoramasi, 0), cststackThumbsallpanoramasi LT scene.count, inc(cststackThumbsallpanoramasi),
      if(cststackThumbsallpanoramasi-wait == cststackThumbsallpanoramasi,
        add(cststackThumbsallpanoramasi-wait, 25);
        wait(0);
      );
      txtadd(thumbname,'stackThumbsallpanoramas_', get(cststackThumbsallpanoramasi));
      stackThumbsallpanoramasCloseThumb(get(thumbname));
    );
    
    set(stackThumbsallpanoramasIsOpen, false);
  </action>
  <action name="stackThumbsallpanoramasCloseThumb">
    tween(layer[%1].x, get(layer[%1].xsmall));
    tween(layer[%1].y, get(layer[%1].ysmall));
    tween(layer[%1].width , 50);
    tween(layer[%1].height, 25);
    set(layer[%1].alpha  , 0.8  );
    set(layer[%1].onover , NULL );
    set(layer[%1].onout  , NULL );
    set(layer[%1].onhover, NULL );hideTooltip();
    set(layer[%1].onclick, stackThumbsallpanoramasOpen() );
  </action>

<!-- **************** -->
<!-- Projections Menu -->
<!-- **************** -->
<ptplugin name="projectionMenu" engine="kolorMenu">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="orientation" value="vertical" type="string" />
		<option name="sub_orientation" value="horizontal" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="background_color" value="b3b3b3" type="string" />
		<option name="background_alpha" value="1" type="float" />
		<option name="item_spacer" value="0" type="int" />
		<option name="border_radius" value="0" type="int" />
		<option name="full_size" value="false" type="bool" />

		<option name="item_out_border_radius" value="0" type="int" />
		<option name="item_out_bg_color"      value="b3b3b3" type="string" />
		<option name="item_out_bg_alpha"      value="1" type="float" />
		<option name="item_out_font_color"    value="ffffff" type="string" />
		<option name="item_out_font_family"   value="Arial" type="string" />
		<option name="item_out_font_size"     value="14" type="int" />
		<option name="item_out_font_weight"   value="normal" type="string" />
		<option name="item_out_font_style"    value="normal" type="string" />
		<option name="item_out_font_decoration"    value="normal" type="string" />
		
		<option name="item_hover_border_radius" value="0" type="int" />
		<option name="item_hover_bg_color" value="d7d7d7" type="string" />
		<option name="item_hover_bg_alpha"      value="1" type="float" />
		<option name="item_hover_font_color"    value="ffffff" type="string" />
		<option name="item_hover_font_family"   value="Arial" type="string" />
		<option name="item_hover_font_size"     value="14" type="int" />
		<option name="item_hover_font_weight"   value="normal" type="string" />
		<option name="item_hover_font_style"    value="normal" type="string" />
		<option name="item_hover_font_decoration"    value="normal" type="string" />
		
		<option name="item_selected_color" value="b3b3b3" type="string" />
		<option name="item_selected_alpha" value="1" type="string" />
		
		<option name="zorder"                   value="1" type="int" />
	</settings>
	<internaldata>
		<group name="projectionMenuButton" titleID="projectionMenumenutitlelabel" thumbnail="" subMenu="true">
			<item name="projViewNormal"        titleID="projectionMenunormallabel" action="invokeKrFunction('setViewNormal();')"        thumbnail=""/>
			<item name="projViewFisheye"       titleID="projectionMenufisheyelabel" action="invokeKrFunction('setViewFisheye();')"       thumbnail=""/>
			<item name="projViewArchitectural" titleID="projectionMenuarchitecturallabel" action="invokeKrFunction('setViewArchitectural();')" thumbnail=""/>
			<item name="projViewStereographic" titleID="projectionMenustereographiclabel" action="invokeKrFunction('setViewStereographic();')" thumbnail=""/>
			<item name="projViewPannini"       titleID="projectionMenupanninilabel" action="invokeKrFunction('setViewPannini();')"       thumbnail=""/>
			<item name="projViewLittlePlanet"  titleID="projectionMenulittleplanetlabel" action="invokeKrFunction('setViewLittlePlanet();')"  thumbnail=""/>

		</group>
	</internaldata>
</ptplugin>

<action name="showKolorMenu-projectionMenu">
	
	js(openKolorMenu(projectionMenu));
</action>

<action name="hideKolorMenu-projectionMenu">
	js(invokePluginFunction(projectionMenu, hideKolorMenu));
</action>

<events name="kolorMenuEvents-projectionMenu" 
		keep="true"
		
		
		onTourStart="js(openKolorMenu(projectionMenu));"
/>
  <!-- ******************* -->
  <!-- Classic Control Bar -->
  <!-- ******************* -->

  <krpano theme2barbuilt="false" theme2backgroundwidthwhenclosed="0" theme2backgroundwidthwhenopened="0" theme2IsOpened="false" />
  <events name="theme2events" onxmlcomplete="theme2buildMenuBar();" keep="true"/>
  <action name="theme2buildMenuBar">
    ifnot (theme2barbuilt, theme2buildMenu(); set(theme2barbuilt, true););
  </action>

  <action name="theme2buildMenu">
    
    set(theme2button_pos, 20);

    set(layer[theme2btn_hidecontrols].x, get(theme2button_pos));
    set(layer[theme2btn_showcontrols].x, get(theme2button_pos));
    inc(theme2button_pos, 36);
    add(theme2backgroundwidthwhenclosed, get(theme2button_pos), 20);



    if (device.desktop,
      set(layer[theme2btn_display_help].x, get(theme2button_pos));
      set(layer[theme2btn_close_help  ].x, get(theme2button_pos));
      inc(theme2button_pos, 36);
    );

    if (device.fullscreensupport,
      set(layer[theme2btn_openfs ].x, get(theme2button_pos));
      set(layer[theme2btn_closefs].x, get(theme2button_pos));
      inc(theme2button_pos, 36);
    );



    set(layer[theme2btn_autorotate_on ].x, get(theme2button_pos));
    set(layer[theme2btn_autorotate_off].x, get(theme2button_pos));
    inc(theme2button_pos, 36);



    if (device.desktop,
      set(layer[theme2btn_ctrlmode_drag_to].x, get(theme2button_pos));
      set(layer[theme2btn_ctrlmode_move_to].x, get(theme2button_pos));
      inc(theme2button_pos, 36);
    );



    if (device.desktop,
        set(layer[theme2btn_right].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
        set(layer[theme2btn_left].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
    );
    if (device.desktop,
        set(layer[theme2btn_down].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
        set(layer[theme2btn_up].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
    );
    if (device.desktop,
        set(layer[theme2btn_out].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
        set(layer[theme2btn_in].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
    );
    if (scene.count GT 1,
        set(layer[theme2btn_next_pano].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
        set(layer[theme2btn_prev_pano].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
      );

    inc(theme2button_pos, 20);

    set(theme2backgroundwidthwhenopened, get(theme2button_pos));
    
    
    add(theme2VerifyVisibility, 20, 20);
    if(theme2backgroundwidthwhenopened == 20,
      set(theme2backgroundwidthwhenopened, 0);
    );

	
	
  </action>

	<events name="theme2StartTourEvents" onTourStart="theme2CallOnStartTour();" keep="true" />

	<action name="theme2CallOnStartTour">
		
		set(layer[theme2menu_controlbar_bg_img].width, get(theme2button_pos));
		set(layer[theme2menu_controlbar_bg].width, get(theme2button_pos));
		theme2showMenuControls();
	</action>

  <style name="theme2_btn_style"
         keep="true"
         alpha="0.8"
         edge="right" align="right"
         width="36" height="36"
         zorder="4"
         onover="theme2ctrlbaronoveraction();"
         onout="theme2ctrlbaronoutaction();"
	onhover="showTooltip(bottom, theme2menuTooltipStyle, bottom);"
         />
  <action name="theme2ctrlbaronoveraction">
    tween(alpha,1,0.1,easeoutquad);
    tween(y,-2,0.1,easeoutquad);
  </action>  
  <action name="theme2ctrlbaronoutaction">
    tween(alpha,0.8);
    tween(y,0,0.1,easeoutquad);
    hideTooltip();
  </action>

  <layer name="theme2menu_controlbar_bg_img"
         keep="true"
         align="bottom"
         x="0" y="10"
         url="%FIRSTXML%/graphics/classiccontrolbar/footer.png"
         zorder="2"
         width="40"
         height="40"
         scale9grid="10|10|80|80"
         visible="false"
         />
  <layer name="theme2menu_controlbar_bg"
         keep="true"
         align="bottom"
         x="0" y="10"
         type="container"
         zorder="3"
         width="40"
         height="40"
         visible="false"
         alpha="1.0"
         >



    <layer name="theme2btn_ctrlmode_move_to"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_to.png"
            style="theme2_btn_style"
            tooltip="controlBar_classicctrlmodeMoveTip"
            onclick="setControlModeMoveTo();"
            visible="false"
            devices="desktop"
            />
    <layer name="theme2btn_ctrlmode_drag_to"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_drag_to.png"
            style="theme2_btn_style"
            tooltip="controlBar_classicctrlmodeDragTip"
            onclick="setControlModeDragTo();"
            visible="false"
            devices="desktop"
            />

    <layer name="theme2btn_in"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_in.png"
            ondown="set(fov_moveforce, -1);"
            onup="set(fov_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classiczoomInTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme2btn_out"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_out.png"
            ondown="set(fov_moveforce, +1);"
            onup="set(fov_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classiczoomOutTip"
            devices="desktop"
            visible="false"
            />

    <layer name="theme2btn_left"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_left.png"
            ondown="set(hlookat_moveforce, -1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classicmoveLeftTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme2btn_right"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_right.png"
            ondown="set(hlookat_moveforce, +1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classicmoveRightTip"
            devices="desktop"
            visible="false"
            />

    <layer name="theme2btn_up"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_up.png"
            ondown="set(vlookat_moveforce, -1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classicmoveUpTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme2btn_down"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_down.png"
            ondown="set(vlookat_moveforce, +1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classicmoveDownTip"
            devices="desktop"
            visible="false"
            />



    <layer name="theme2btn_prev_pano"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_previous_scene.png"
            onclick="loadPreviousScene();"
            style="theme2_btn_style"
            tooltip="controlBar_classicprevSceneTip"
            visible="false"
            />
    <layer name="theme2btn_next_pano"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_next_scene.png"
            onclick="loadNextScene();"
            style="theme2_btn_style"
            tooltip="controlBar_classicnextSceneTip"
            visible="false"
            />



    <layer name="theme2btn_openfs"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();"
            style="theme2_btn_style"
            devices="fullscreensupport"
            visible="false"
            tooltip="controlBar_classicopenFsTip"
            />
    <layer name="theme2btn_closefs"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();"
            style="theme2_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_classiccloseFsTip"
            />

    <layer name="theme2btn_autorotate_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_start_autorotation.png"
            onclick="startautorotation();"
            style="theme2_btn_style"
            visible="false"
            tooltip="controlBar_classicautorotateOnTip"
            />
    <layer name="theme2btn_autorotate_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_stop_autorotation.png"
            onclick="stopautorotation();"
            style="theme2_btn_style"
            visible="false"
            tooltip="controlBar_classicautorotateOffTip"
            />



    <layer name="theme2btn_display_help"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_help.png"
            onclick="theme2displayHelp();"
            style="theme2_btn_style"
            devices="desktop"
            visible="false"
            tooltip="controlBar_classicdisplayHelpTip"
            />
    <layer name="theme2btn_close_help"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_help.png"
            onclick="theme2closeHelp();"
            style="theme2_btn_style"
            visible="false"
            devices="desktop"
            tooltip="controlBar_classichideHelpTip"
            />



    <layer name="theme2btn_hidecontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_controls.png"
            style="theme2_btn_style"
            onclick="theme2hideMenuControls();hideTourControls();"
            visible="false"
            tooltip="controlBar_classichideControlsTip"
            />
    <layer name="theme2btn_showcontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_show_controls.png"
            style="theme2_btn_style"
            onclick="theme2showMenuControls();showTourControls();"
            tooltip="controlBar_classicdisplayControlsTip"
            visible="false"
            />
  </layer>



	<events name="theme2controlmodechangedevent" 
		oncontrolmodechanged="theme2updateControlModeButtons();" 
		keep="true" />
	<action name="theme2HideControlModeButtons">
		set(layer[theme2btn_ctrlmode_move_to].visible, false);
		set(layer[theme2btn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="theme2ShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[theme2btn_ctrlmode_drag_to].visible, true);
			set(layer[theme2btn_ctrlmode_move_to].visible, false);
		,
			set(layer[theme2btn_ctrlmode_move_to].visible, true);
			set(layer[theme2btn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="theme2updateControlModeButtons">
	if (device.desktop,
		set(theme2DisplayControlModeButtons, false);
		if (theme2IsOpened, set(theme2DisplayControlModeButtons, true););
		if (theme2DisplayControlModeButtons,
			theme2ShowControlModeButtons();
		,
			theme2HideControlModeButtons();
		);
	,
		theme2HideControlModeButtons();
	);
	</action>


  <action name="theme2hideMenuControls">
    set(theme2IsOpened, false);
    set(layer[theme2btn_hidecontrols].visible, false);
    set(layer[theme2btn_showcontrols].visible, true);
    theme2updateFullscreenButtons();


    if (scene.count GT 1,
    set(layer[theme2btn_prev_pano].visible, false);
    set(layer[theme2btn_next_pano].visible, false);
    );
    theme2updateAutorotationButtons();


    set(layer[theme2btn_up].visible  , false);
    set(layer[theme2btn_down].visible, false);
    set(layer[theme2btn_right].visible, false);
    set(layer[theme2btn_left].visible , false);
    set(layer[theme2btn_in].visible , false);
    set(layer[theme2btn_out].visible, false);


    theme2updateControlModeButtons();


    theme2updateHelpButtons();


    set(layer[theme2menu_controlbar_bg_img].visible, true);
    set(layer[theme2menu_controlbar_bg].visible, true);
    tween(layer[theme2menu_controlbar_bg_img].width , get(theme2backgroundwidthwhenclosed));
    tween(layer[theme2menu_controlbar_bg].width , get(theme2backgroundwidthwhenclosed));
    tween(layer[theme2menu_controlbar_bg_img].alpha, 0.8);
  </action>
  <action name="theme2showMenuControls">
    set(theme2IsOpened, true);
    set(layer[theme2btn_hidecontrols].visible, true);
    set(layer[theme2btn_showcontrols].visible, false);
    if(theme2backgroundwidthwhenopened == 0,
      set(layer[theme2menu_controlbar_bg_img].visible, false);
      set(layer[theme2menu_controlbar_bg].visible, false);
    ,
      set(layer[theme2menu_controlbar_bg_img].visible, true);
      set(layer[theme2menu_controlbar_bg].visible, true);
    );
    tween(layer[theme2menu_controlbar_bg_img].alpha, 0.8);
    tween(layer[theme2menu_controlbar_bg_img].width, get(theme2backgroundwidthwhenopened), 0.5, easeOutQuad, theme2showMenuButtons(););
    tween(layer[theme2menu_controlbar_bg].width, get(theme2backgroundwidthwhenopened), 0.5, easeOutQuad, theme2showMenuButtons(););
  </action>
  <action name="theme2showMenuButtons">
    if (device.desktop,
    set(layer[theme2btn_up].visible  , true);
    set(layer[theme2btn_down].visible, true);
    );
    if (device.desktop,
    set(layer[theme2btn_right].visible, true);
    set(layer[theme2btn_left].visible , true);
    );
    if (device.desktop,
    set(layer[theme2btn_in].visible , true);
    set(layer[theme2btn_out].visible, true);
    );


    theme2updateControlModeButtons();


    theme2updateHelpButtons();


    theme2updateFullscreenButtons();


    if (scene.count GT 1,
      set(layer[theme2btn_prev_pano].visible, true);
      set(layer[theme2btn_next_pano].visible, true);
    );
    theme2updateAutorotationButtons();


  </action>

  <layer name="theme2helpScreen" align="center" keep="true" onclick="theme2closeHelp();" url="%FIRSTXML%/graphics/classiccontrolbar/help_screen_bg.png" visible="false" height="10%" width="prop" displayed="false" alpha="0.8" />

  <layer name="theme2helpScreenFg" align="center" keep="true" onclick="theme2closeHelp();" 
         url="%FIRSTXML%/graphics/classiccontrolbar/help_screen_fg.png" 
         alpha="0.8" 
         height="50%" 
         width="prop"
         visible="false" />
  <action name="theme2displayHelp">
    set(layer[theme2helpScreen].displayed,true);
    set(layer[theme2helpScreen].visible,true);
    tween(layer[theme2helpScreen].height, 50%, 1, easeOutQuad,
      set(layer[theme2helpScreenFg].visible,true);
    );
    theme2updateHelpButtons();
  </action>
  <action name="theme2closeHelp">
    set(layer[theme2helpScreen].displayed,false);
    set(layer[theme2helpScreenFg].visible,false);
    tween(layer[theme2helpScreen].height, 10%, 1, easeOutQuad,
      set(layer[theme2helpScreen].visible,false);
    );
    theme2updateHelpButtons();
  </action>
	<action name="theme2HideHelpButtons">
		set(layer[theme2btn_display_help].visible, false);
		set(layer[theme2btn_close_help].visible, false);
	</action>
	<action name="theme2ShowHelpButtons">
		if (layer[theme2helpScreen].displayed,
			set(layer[theme2btn_close_help].visible, true);
			set(layer[theme2btn_display_help].visible, false);
		,
			set(layer[theme2btn_display_help].visible, true);
			set(layer[theme2btn_close_help].visible, false);
		);
	</action>
	<action name="theme2updateHelpButtons">
	if (device.desktop,
		set(theme2DisplayHelpButtons, false);
		if (theme2IsOpened, set(theme2DisplayHelpButtons, true););
		if (theme2DisplayHelpButtons,
			theme2ShowHelpButtons();
		,
			theme2HideHelpButtons();
		);
	,
		theme2HideHelpButtons();
	);
	</action>



	<events name="theme2menufullscreenchangeevent"
		onenterfullscreen="theme2updateFullscreenButtons();"
		onexitfullscreen="theme2updateFullscreenButtons();"
		keep="true"/>
	<action name="theme2HideFullscreenButtons">
		set(layer[theme2btn_openfs].visible , false);
		set(layer[theme2btn_closefs].visible, false);
	</action>
	<action name="theme2ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[theme2btn_openfs].visible , false);
				set(layer[theme2btn_closefs].visible, true);
			,
				set(layer[theme2btn_openfs].visible ,true);
				set(layer[theme2btn_closefs].visible,false);
			);
		,
			theme2HideFullscreenButtons();
		);
	</action>
	<action name="theme2updateFullscreenButtons">
		set(theme2DisplayFullscreenButtons, false);
		if (theme2IsOpened, set(theme2DisplayFullscreenButtons, true););
		if (theme2DisplayFullscreenButtons,
			theme2ShowFullscreenButtons();
		,
			theme2HideFullscreenButtons();
		);
	</action>

	<events name="theme2AutorotationEvents"
		onstartautorotation="theme2updateAutorotationButtons();"
		onresumeautorotation="theme2updateAutorotationButtons();"
		onstopautorotation="theme2updateAutorotationButtons();"
		onpauseautorotation="theme2updateAutorotationButtons();"
		keep="true"/>
	<action name="theme2HideAutorotationButtons">
		set(layer[theme2btn_autorotate_off].visible, false);
		set(layer[theme2btn_autorotate_on].visible , false);
	</action>
	<action name="theme2ShowAutorotationButtons">
		if(tour_autorotateenabled==false,
			set(layer[theme2btn_autorotate_off].visible, false);
			set(layer[theme2btn_autorotate_on].visible , true);
		,
			set(layer[theme2btn_autorotate_off].visible, true);
			set(layer[theme2btn_autorotate_on].visible , false);
		);
	</action>
	<action name="theme2updateAutorotationButtons">
		set(theme2DisplayAutorotationButtons, false);
		if (theme2IsOpened, set(theme2DisplayAutorotationButtons, true););
		if (theme2DisplayAutorotationButtons,
			theme2ShowAutorotationButtons();
		,
			theme2HideAutorotationButtons();
		);
	</action>





  <textstyle name="theme2menuTooltipStyle"
             font="Helvetica"
             fontsize="16"
             bold="true"
             italic="false"
             background="false"
             border="false"
             alpha="0.8"
             blendmode="layer"
             textcolor="0xe6e6e6"
             effect="glow(0x111111,0.8);"
             origin="bottom"
             yoffset="60"
             edge="center"
             xoffset="0"
             textalign="center"
             noclip="true"
             devices="flash"
             />
	<layer name="theme2menuTooltipStyle"
		keep="true"
		enabled="false"
		capture="false"
		url="%FIRSTXML%/graphics/textfield.swf"
		align="center"
		background="true"
		backgroundcolor="0xdedede"
		backgroundalpha="0.8"
		border="false"
		bordercolor="0xffffff"
		css="color:#e6e6e6;font-family:Helvetica;font-weight:bold;font-size:16px;text-align:center;"
		width="200"
		height="20"
		autoheight="true"
			edge="bottom"
		textshadow="1.0"
		selectable="false"
		zorder="0"
		html=""
		visible="false"
		devices="html5"
		/>
<action name="setViewPannini">
	stopSetViewTweens();
	setViewPanniniComplete();
</action>

<action name="setViewPanniniComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == false, set(backtonormalfirst,true); );
		if(view.stereographic == false, set(backtonormalfirst,true); );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		set(view.pannini, true);
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75));
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action><action name="setViewFisheye">
	stopSetViewTweens();
	setViewFisheyeComplete();
</action>

<action name="setViewFisheyeComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.30), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.30), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.fovmax, 179, 0.25);
			set(view.fisheyefovlink, 1.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
			tween(view.fisheye, 0.40, distance(1.0, 1.25));
			tween(view.vlookat, get(panoview.v), 1.25);
		);
	);
</action><action name="setViewStereographic">
	stopSetViewTweens();
	setViewStereographicComplete();
</action>

<action name="setViewStereographicComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action><action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action><action name="setViewLittlePlanet">
	stopSetViewTweens();
	setViewLittlePlanetComplete();
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0, updateobject(true,true)); );
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action><action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
</action>
</krpano>